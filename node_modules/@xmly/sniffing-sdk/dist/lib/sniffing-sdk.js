"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sdkVersion = void 0;
var util_1 = require("./util");
var routerObserver_1 = __importDefault(require("./routerObserver"));
var exposure_1 = __importDefault(require("./exposure"));
var eventLog_1 = __importDefault(require("./eventLog"));
var ERROR = __importStar(require("./ERROR"));
var HANDLEROUTER = Symbol('handleRouterUbt');
var INITTRACK = Symbol('initTrack');
var ONCLICK = Symbol('onClick');
var EXCUTEUBTTTACKER = Symbol('excuteUbtTracker');
exports.sdkVersion = 'process.env.VERSION';
var SniffingClass = /** @class */ (function () {
    function SniffingClass() {
        this.options = {
            autoExpo: false,
            autoPageTracker: true,
            isDebugger: false
        };
        this.trackerEvents = [];
        this._originMap = {};
        this._init = false;
        this._autoExpo = false;
        this.expo = null;
        this.routerObserver = null;
    }
    /**
     * @description: 处理xmrep对象
     * @param {any} xmrepInstance
     * @param {any} options
     * @param {boolean} isReturn
     * @return {*}
     */
    SniffingClass.prototype.xmrep = function (xmrepInstance, options, isReturn) {
        if (options === void 0) { options = {}; }
        if (isReturn === void 0) { isReturn = true; }
        var customCommon = options.c || {};
        xmrepInstance(Object.assign(options, {
            c: __assign(__assign({}, customCommon), { sdkVersion: 'process.env.VERSION' })
        }));
        if (isReturn) {
            return this;
        }
    };
    /**
     * @description: 初始化埋点sdk，重复初始化会提示
     * @param {TrackerMap} trackerMap
     * @param {Options} options
     * @return {*} 埋点实例
     */
    SniffingClass.prototype.init = function (trackerMap, options) {
        if (!(options && options.xmrep && options.xmrep.params && options.xmrep.params.b)) {
            console.error('please check your config of sniffing-sdk, the bid is required, more infomation in http://thoughts.ximalaya.com/workspaces/5f6c3795931e49001d29240f/docs/5ff6aa88f4c0000001c4c2db');
        }
        if (this._init) {
            this.log(ERROR.ENVIRONMENT.REPEAT, 'warn');
            return this;
        }
        this._init = true;
        this.install(trackerMap, false);
        this.options = Object.assign({}, this.options, options);
        // 初始化xmrep
        this.options.xmrep && this.xmrep(this.options.xmrep.start, this.options.xmrep.params, false);
        this[INITTRACK](this.options);
        return this;
    };
    /**
     * @description: 合并配置和处理注册事件表
     * @param {TrackerMap} trackerMap
     * @param {Options} options
     * @param {Boolean} extend
     * @return {*}
     */
    SniffingClass.prototype.install = function (trackerMap, extend) {
        var _this = this;
        if (extend === void 0) { extend = true; }
        if (!this._init) {
            this.log(ERROR.NOTFOUND.SniffingNotReady, 'warn');
            return this;
        }
        this._originMap = extend ? Object.assign({}, this._originMap, trackerMap) : trackerMap;
        this.trackerEvents = Object.keys(this._originMap).map(function (item) { return ({
            id: item.split(' ')[0],
            label: item.split(' ')[1],
            pathname: item.split(' ')[2],
            cb: _this._originMap[item]
        }); });
        if (extend) {
            return this;
        }
    };
    SniffingClass.prototype[HANDLEROUTER] = function (routerObj) {
        // 路由pathname匹配并且label为enter或者leave
        var routerEvent = this.trackerEvents
            .filter(function (item) {
            return (routerObj.currentPath &&
                util_1.pathIsEqual(routerObj.currentPath, item.pathname) &&
                item.label === 'enter') ||
                (routerObj.refererPath &&
                    util_1.pathIsEqual(routerObj.refererPath, item.pathname) &&
                    item.label === 'leave');
        })
            .sort(function (a, b) {
            // 先处理leave逻辑，然后处理enter逻辑
            return a.label < b.label ? 0 : -1;
        });
        if (routerEvent.length > 0) {
            routerEvent.forEach(function (item) { return item.cb(routerObj); });
        }
        else {
            if (this.options.autoTrack) {
                this.log("autoTracker (pageEvent: " + routerObj.ext.action + ")", 'warn');
                this.options.autoTrack('PAGE', routerObj);
            }
        }
    };
    SniffingClass.prototype[INITTRACK] = function (options) {
        var _this = this;
        util_1.bindEventListener('click', this[ONCLICK].bind(this), window ? window.document : null, {
            passive: false
        });
        if (options.autoPageTracker) {
            this[HANDLEROUTER]({
                currentPath: (options.router && options.router.type) === 'hash'
                    ? window.location.hash
                    : window.location.pathname,
                ext: {
                    current: window.location,
                    action: 'DOMContentLoaded'
                }
            });
            this.routerObserver = routerObserver_1.default(this.options.router);
            this.routerObserver.onChange(function (routerObj) {
                _this[HANDLEROUTER](routerObj);
            });
        }
        options.autoExpo && this.initExpo();
    };
    /**
     * @description: 初始化曝光埋点
     * @param {*}
     * @return {*} this
     */
    SniffingClass.prototype.initExpo = function () {
        this.options.autoExpo = true;
        if (this._autoExpo) {
            return this;
        }
        this.expo = new exposure_1.default(this[EXCUTEUBTTTACKER].bind(this));
        this._autoExpo = true;
        return this;
    };
    /**
     * @description: 注册点击埋点
     * @param {Event} e
     * @return {*}
     */
    SniffingClass.prototype[ONCLICK] = function (e) {
        var target = util_1.getTrackParams(e);
        if (target) {
            var ubtClick = target.dataset.ubtClick;
            ubtClick && this[EXCUTEUBTTTACKER](util_1.transFormTrackParams(target.dataset));
        }
    };
    /**
     * 执行事件
     * @param trackParams
     */
    SniffingClass.prototype[EXCUTEUBTTTACKER] = function (trackParams) {
        var findOne = this.trackerEvents.filter(function (item) {
            return trackParams.evId.includes(item.id);
        });
        if (findOne.length) {
            findOne.forEach(function (item) { return item.cb(trackParams.evParams || {}, trackParams); });
        }
        else {
            if (this.options.autoTrack) {
                this.log("autoTracker (click id: " + trackParams.evId + ")", 'info');
                this.options.autoTrack('CLICK', trackParams.evParams || {}, trackParams);
            }
            else {
                this.log(ERROR.NOTFOUND.UnregistedId + "(id: " + trackParams.evId + ")", 'warn');
            }
        }
    };
    /**
     * @description: 手动曝光方法
     * @param {string} ubtId
     * @param {object} ubtParams
     * @return {*}
     */
    SniffingClass.prototype.manualTrack = function (evId, ubtParams) {
        this[EXCUTEUBTTTACKER](util_1.transFormTrackParams({ evId: evId, ubtParams: ubtParams, evTrigger: 'event' }));
    };
    /**
     * @description: log
     * @param {any} text
     * @param {*} level  "info" | "warn" | "error" = "info"
     * @return {*}
     */
    SniffingClass.prototype.log = function (text, level) {
        if (level === void 0) { level = 'info'; }
        eventLog_1.default('Sniffing-sdk: ', this.options.isDebugger)(text, level);
    };
    return SniffingClass;
}());
exports.default = SniffingClass;
//# sourceMappingURL=sniffing-sdk.js.map