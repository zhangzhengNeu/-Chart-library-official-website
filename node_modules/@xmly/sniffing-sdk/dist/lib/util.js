"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pathIsEqual = exports.env = exports.transFormExpoTrackParams = exports.transFormTrackParams = exports.lookUpParent = exports.getTrackParams = exports.isExpoed = exports.isValidSniffingExpoDom = exports.isValidSniffingDom = exports.bindEventListener = exports.isListenerType2 = exports.isListenerType1 = void 0;
var ERROR = __importStar(require("./ERROR"));
var path_to_regexp_1 = require("path-to-regexp");
/**
 * @description: 判断对象上是否有addEventListener方法
 * @param {object}
 * @return {boolean}
 */
var isListenerType1 = function (target) {
    return !!target.addEventListener;
};
exports.isListenerType1 = isListenerType1;
/**
 * @description: 判断对象上是否有on方法
 * @param {object}
 * @return {boolean}
 */
var isListenerType2 = function (target) {
    return !!target.on;
};
exports.isListenerType2 = isListenerType2;
/**
 * @description:
 * @param {string} name
 * @param {*} handle
 * @param {*} target
 * @param {*} options
 * @return {*}
 */
var bindEventListener = function (name, handler, target, options) {
    if (!target) {
        return false;
    }
    if (exports.isListenerType1(target)) {
        target.addEventListener(name, handler, options);
    }
    else if (exports.isListenerType2(target)) {
        target.on(name, handler, options);
    }
};
exports.bindEventListener = bindEventListener;
/**
 * @description: 判断当前dataset对象是否符合点击埋点dataset(data-ubt-id或者data-ubt-click)
 * @param {TrackParams} obj
 * @return {*}
 */
var isValidSniffingDom = function (obj) {
    return obj && Object.keys(obj).length > 0 && obj.ubtClick;
};
exports.isValidSniffingDom = isValidSniffingDom;
/**
 * @description: 判断是否是合法的曝光标签
 * @param {TrackParams} obj
 * @return {*}
 */
var isValidSniffingExpoDom = function (obj) {
    return obj && Object.keys(obj).length > 0 && obj.ubtExpo;
};
exports.isValidSniffingExpoDom = isValidSniffingExpoDom;
var isExpoed = function (obj) {
    return obj.expoStatus === 'finished';
};
exports.isExpoed = isExpoed;
var getTrackParams = function (e) {
    if (!exports.isValidSniffingDom(e.target.dataset)) {
        return exports.lookUpParent(e.path || e.deepPath || e.target);
    }
    return e.target;
};
exports.getTrackParams = getTrackParams;
/**
 * @description: 模拟冒泡获取合法的TrackParams对象
 * @param {any} routeOrTarget
 * @return {any}
 */
var lookUpParent = function (routeOrTarget) {
    if (Array.isArray(routeOrTarget)) {
        return routeOrTarget.find(function (d) { return exports.isValidSniffingDom(d.dataset); });
    }
    var maxLookupDepth = 200;
    if (routeOrTarget) {
        var tmpNode = routeOrTarget;
        var lookupDepth = 1;
        do {
            if (exports.isValidSniffingDom(tmpNode.dataset)) {
                return tmpNode;
            }
            if (lookupDepth > maxLookupDepth) {
                return null;
            }
            tmpNode = tmpNode.parentNode;
            lookupDepth++;
        } while (tmpNode);
    }
    return null;
};
exports.lookUpParent = lookUpParent;
var transFormTrackParams = function (dataset) {
    var formatEv = {
        evId: dataset.evId || dataset.ubtClick || dataset.ubtExpo,
        evParams: dataset.evParams || dataset.ubtParams,
        evTrigger: dataset.evTrigger || 'click'
    };
    if (!(formatEv.evId instanceof Array)) {
        formatEv.evId = (formatEv.evId + '')
            .replace(' ', ',')
            .split(',')
            .filter(Boolean);
    }
    try {
        formatEv.evParams = formatEv.evParams
            ? typeof formatEv.evParams === 'object'
                ? formatEv.evParams
                : JSON.parse(formatEv.evParams)
            : null;
    }
    catch (err) {
        console.error(ERROR.EXCEPTION.ParamsParseError, err);
    }
    return formatEv;
};
exports.transFormTrackParams = transFormTrackParams;
var transFormExpoTrackParams = function (params) {
    return exports.transFormTrackParams({
        ubtExpo: params.ubtExpo,
        evParams: params.ubtParams,
        evTrigger: 'expo'
    });
};
exports.transFormExpoTrackParams = transFormExpoTrackParams;
/**
 * 当前环境判断
 * 为兼容ssr因此使用方法
 */
var env = function () { return ({
    isIos: !!navigator.userAgent.toLowerCase().match(/\(i[^;]+;( u;)? cpu.+mac os x/),
    isBrowser: typeof window !== 'undefined'
}); };
exports.env = env;
var pathIsEqual = function (path, rep) {
    if (!rep)
        return false;
    var matchBrowserUrl = path_to_regexp_1.match(rep, { decode: decodeURIComponent });
    return matchBrowserUrl(path);
};
exports.pathIsEqual = pathIsEqual;
//# sourceMappingURL=util.js.map