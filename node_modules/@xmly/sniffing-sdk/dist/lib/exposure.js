"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * @Date: 2020-10-29 17:37:51
 * @LastEditTime: 2021-02-02 15:22:23
 * @Descripttion: 曝光埋点类
 */
require("intersection-observer");
var util_1 = require("./util");
var lodash_1 = __importDefault(require("lodash"));
var Exposure = /** @class */ (function () {
    function Exposure(excuteUbtTracker) {
        this.excuteUbtTracker = excuteUbtTracker;
        this.init();
    }
    Exposure.prototype.init = function () {
        var _this = this;
        this.observer = new IntersectionObserver(function (entries, observer) {
            entries.forEach(function (item) {
                var dataset = lodash_1.default.get(item, 'target.dataset', {});
                if (util_1.isExpoed(dataset) || !util_1.isValidSniffingExpoDom(dataset)) {
                    observer.unobserve(item.target);
                }
                else if (item.isIntersecting) {
                    var data = util_1.transFormExpoTrackParams(dataset);
                    if (item.target.clientWidth !== 0 || item.target.clientHeight !== 0) {
                        _this.excuteUbtTracker(data);
                        item.target.setAttribute('data-expo-status', 'finished');
                        observer.unobserve(item.target);
                    }
                    else {
                        // 提示宽高都为0，不曝光
                    }
                }
            });
        }, {
            root: null,
            threshold: 0
        });
        // setTimeout(() => {
        //收集当前dom节点
        this.setMutaion();
        //   this.observerAll()
        // }, 500)
    };
    Exposure.prototype.add = function (els, isRemove) {
        var _this = this;
        if (isRemove === void 0) { isRemove = false; }
        if (els && els.length) {
            els.forEach &&
                els.forEach(function (node) {
                    _this.observer && isRemove ? _this.observer.unobserve(node) : _this.observer.observe(node);
                });
        }
    };
    Exposure.prototype.remove = function (els) {
        this.add(els, true);
    };
    // 性能优化,500毫秒内如果有dom变化重新设置监听器，
    Exposure.prototype.setMutaion = function () {
        var fn = lodash_1.default.debounce(this.observerAll, 500).bind(this);
        if (!MutationObserver) {
            console.warn('当前环境不支持曝光埋点，请使用手动埋点');
            return false;
        }
        //监听后续的动态生成或者删除的dom
        this._obs = new MutationObserver(function (mutationList) {
            mutationList.length && fn();
        });
        this._obs.observe(document.querySelector('body'), {
            childList: true,
            attributes: false,
            subtree: true // 观察后代节点，默认为 false
        });
    };
    Exposure.prototype.observerAll = function () {
        var target = document.querySelectorAll('[data-ubt-expo]');
        this.add(target);
    };
    return Exposure;
}());
exports.default = Exposure;
//# sourceMappingURL=exposure.js.map