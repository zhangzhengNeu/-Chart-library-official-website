"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleStateChange = void 0;
/*
 * @Date: 2020-11-17 17:25:52
 * @LastEditTime: 2021-02-04 20:05:40
 * @Descripttion:
 */
var events_1 = __importDefault(require("events"));
var routerEventEmitter = new events_1.default.EventEmitter();
var getRefer = function (win) { return ({
    hash: win.location.hash,
    host: win.location.host,
    hostname: win.location.hostname,
    href: win.location.href,
    origin: win.location.origin,
    pathname: win.location.pathname
}); };
var refererTemp = getRefer(window);
var handleStateChange = function (callback) { return function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var referer = getRefer(window);
    callback.apply(window.history, args);
    refererTemp = getRefer(window);
    if (referer.href === window.location.href)
        return false;
    routerEventEmitter.emit('routerChange', {
        currentPath: window.location.pathname,
        refererPath: referer.pathname,
        ext: {
            current: window.location,
            referer: referer,
            action: 'replaceState,pushState'
        }
    });
    return true;
}; };
exports.handleStateChange = handleStateChange;
var handleHashCallback = function (hashChangeEvent) {
    routerEventEmitter.emit('routerChange', {
        currentPath: window.location.hash,
        refererPath: '#' + hashChangeEvent.oldURL.split('#')[1],
        ext: {
            current: window.location,
            refer: hashChangeEvent,
            action: 'hashchange'
        }
    });
};
var handlePopStateCallback = function (event) {
    routerEventEmitter.emit('routerChange', {
        currentPath: window.location.pathname,
        refererPath: refererTemp.pathname,
        ext: {
            current: window.location,
            referer: refererTemp,
            action: 'popstate'
        }
    });
    refererTemp = getRefer(window);
};
exports.default = (function (options) {
    if (options === void 0) { options = { type: 'browser' }; }
    if (options.type === 'hash') {
        window.addEventListener('hashchange', handleHashCallback);
    }
    else {
        var _a = window.history, pushState = _a.pushState, replaceState = _a.replaceState;
        window.history.pushState = exports.handleStateChange(pushState);
        window.history.replaceState = exports.handleStateChange(replaceState);
        window.addEventListener('popstate', handlePopStateCallback);
    }
    return {
        onChange: function (callback) {
            routerEventEmitter.on('routerChange', callback);
        },
        destory: function () {
            routerEventEmitter.removeAllListeners();
            window.removeEventListener('hashchange', handleHashCallback);
        }
    };
});
//# sourceMappingURL=routerObserver.js.map