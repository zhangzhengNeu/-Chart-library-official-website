"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.INFO = exports.EXCEPTION = exports.NOTFOUND = exports.ENVIRONMENT = void 0;
var ENVIRONMENT;
(function (ENVIRONMENT) {
    ENVIRONMENT["REPEAT"] = "you are init sdk more than once, the new tracker map will be overwrided. Please check your code and use 'install'";
    ENVIRONMENT["NotSupport"] = "environment doesn't support exposure event use manualTrack method instead";
})(ENVIRONMENT = exports.ENVIRONMENT || (exports.ENVIRONMENT = {}));
var NOTFOUND;
(function (NOTFOUND) {
    NOTFOUND["NoPageEvent"] = "can't find any page events in current scope";
    NOTFOUND["FireWrongId"] = "can't find exposure event id";
    NOTFOUND["UnregistedId"] = "can't match event id in event list";
    NOTFOUND["RefNotReady"] = "can't find target in DOM";
    NOTFOUND["SniffingNotReady"] = "please init the sniffing first";
})(NOTFOUND = exports.NOTFOUND || (exports.NOTFOUND = {}));
var EXCEPTION;
(function (EXCEPTION) {
    EXCEPTION["Illegal"] = "target is illegal!";
    EXCEPTION["Repeated"] = "event id repeated!";
    EXCEPTION["ParamsParseError"] = "can't parse params! Please use stringified JSON object.";
    EXCEPTION["FireOnce"] = "el was fired once, expo event wouldn't bind to element -> ";
})(EXCEPTION = exports.EXCEPTION || (exports.EXCEPTION = {}));
var INFO;
(function (INFO) {
    INFO["UseHide"] = "use pagehide";
    INFO["UseBeforeunload"] = "use beforeunload";
    INFO["UseUnmount"] = "use unmount";
})(INFO = exports.INFO || (exports.INFO = {}));
//# sourceMappingURL=ERROR.js.map