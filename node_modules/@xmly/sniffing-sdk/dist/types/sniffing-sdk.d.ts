import { Options, TrackerMap, TrackerEvent, TrackParams, RouterObject } from './types/index';
declare const HANDLEROUTER: unique symbol;
declare const INITTRACK: unique symbol;
declare const ONCLICK: unique symbol;
declare const EXCUTEUBTTTACKER: unique symbol;
export declare const sdkVersion = "process.env.VERSION";
declare class SniffingClass {
    options: Options;
    trackerEvents: Array<TrackerEvent>;
    _init: boolean;
    _autoExpo: boolean;
    _originMap: TrackerMap;
    expo: any;
    routerObserver: any;
    constructor();
    /**
     * @description: 处理xmrep对象
     * @param {any} xmrepInstance
     * @param {any} options
     * @param {boolean} isReturn
     * @return {*}
     */
    xmrep(xmrepInstance: any, options?: any, isReturn?: boolean): this | undefined;
    /**
     * @description: 初始化埋点sdk，重复初始化会提示
     * @param {TrackerMap} trackerMap
     * @param {Options} options
     * @return {*} 埋点实例
     */
    init(trackerMap: TrackerMap, options?: Options): SniffingClass;
    /**
     * @description: 合并配置和处理注册事件表
     * @param {TrackerMap} trackerMap
     * @param {Options} options
     * @param {Boolean} extend
     * @return {*}
     */
    install(trackerMap: TrackerMap, extend?: Boolean): this | undefined;
    [HANDLEROUTER](routerObj: RouterObject): void;
    [INITTRACK](options: Options): void;
    /**
     * @description: 初始化曝光埋点
     * @param {*}
     * @return {*} this
     */
    initExpo(): this;
    /**
     * @description: 注册点击埋点
     * @param {Event} e
     * @return {*}
     */
    [ONCLICK](e: Event): void;
    /**
     * 执行事件
     * @param trackParams
     */
    [EXCUTEUBTTTACKER](trackParams: TrackParams): void;
    /**
     * @description: 手动曝光方法
     * @param {string} ubtId
     * @param {object} ubtParams
     * @return {*}
     */
    manualTrack(evId: string | Array<string> | number, ubtParams?: object): void;
    /**
     * @description: log
     * @param {any} text
     * @param {*} level  "info" | "warn" | "error" = "info"
     * @return {*}
     */
    log(text: any, level?: 'info' | 'warn' | 'error'): void;
}
export default SniffingClass;
