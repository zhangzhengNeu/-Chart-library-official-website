import { TrackParams } from './types/index';
/**
 * @description: 判断对象上是否有addEventListener方法
 * @param {object}
 * @return {boolean}
 */
export declare const isListenerType1: (target: any) => boolean;
/**
 * @description: 判断对象上是否有on方法
 * @param {object}
 * @return {boolean}
 */
export declare const isListenerType2: (target: any) => boolean;
/**
 * @description:
 * @param {string} name
 * @param {*} handle
 * @param {*} target
 * @param {*} options
 * @return {*}
 */
export declare const bindEventListener: (name: string, handler: (e: any) => void, target?: any, options?: any) => false | undefined;
/**
 * @description: 判断当前dataset对象是否符合点击埋点dataset(data-ubt-id或者data-ubt-click)
 * @param {TrackParams} obj
 * @return {*}
 */
export declare const isValidSniffingDom: (obj: TrackParams | any) => any;
/**
 * @description: 判断是否是合法的曝光标签
 * @param {TrackParams} obj
 * @return {*}
 */
export declare const isValidSniffingExpoDom: (obj: TrackParams | any) => any;
export declare const isExpoed: (obj: any) => boolean;
export declare const getTrackParams: (e: any) => any;
/**
 * @description: 模拟冒泡获取合法的TrackParams对象
 * @param {any} routeOrTarget
 * @return {any}
 */
export declare const lookUpParent: (routeOrTarget: any) => any;
export declare const transFormTrackParams: (dataset: any) => TrackParams;
export declare const transFormExpoTrackParams: (params: any) => TrackParams;
/**
 * 当前环境判断
 * 为兼容ssr因此使用方法
 */
export declare const env: () => {
    isIos: boolean;
    isBrowser: boolean;
};
export declare const pathIsEqual: (path: string, rep?: string | undefined) => false | import("path-to-regexp").MatchResult<object>;
