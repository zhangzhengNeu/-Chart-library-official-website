/*
 * @Date: 2020-10-29 17:37:51
 * @LastEditTime: 2021-02-02 15:22:23
 * @Descripttion: 曝光埋点类
 */
import 'intersection-observer'
import { TrackParams } from './types/index'
import { transFormExpoTrackParams, isValidSniffingExpoDom, isExpoed } from './util'
import _ from 'lodash'
export default class Exposure {
  public observer: any
  public _obs: any
  public excuteUbtTracker: (trackParams: TrackParams) => void
  constructor(excuteUbtTracker: any) {
    this.excuteUbtTracker = excuteUbtTracker
    this.init()
  }
  public init() {
    this.observer = new IntersectionObserver(
      (entries, observer) => {
        entries.forEach((item: IntersectionObserverEntry) => {
          const dataset = _.get(item, 'target.dataset', {})
          if (isExpoed(dataset) || !isValidSniffingExpoDom(dataset)) {
            observer.unobserve(item.target)
          } else if (item.isIntersecting) {
            const data = transFormExpoTrackParams(dataset)
            if (item.target.clientWidth !== 0 || item.target.clientHeight !== 0) {
              this.excuteUbtTracker(data)
              item.target.setAttribute('data-expo-status', 'finished')
              observer.unobserve(item.target)
            } else {
              // 提示宽高都为0，不曝光
            }
          }
        })
      },
      {
        root: null,
        threshold: 0
      }
    )
    // setTimeout(() => {
    //收集当前dom节点
    this.setMutaion()
    //   this.observerAll()
    // }, 500)
  }
  public add(els: any, isRemove = false) {
    if (els && els.length) {
      els.forEach &&
        els.forEach((node: any) => {
          this.observer && isRemove ? this.observer.unobserve(node) : this.observer.observe(node)
        })
    }
  }
  public remove(els?: NodeList | Array<Element>) {
    this.add(els, true)
  }

  // 性能优化,500毫秒内如果有dom变化重新设置监听器，
  public setMutaion() {
    const fn = _.debounce(this.observerAll, 500).bind(this)
    if (!MutationObserver) {
      console.warn('当前环境不支持曝光埋点，请使用手动埋点')
      return false
    }
    //监听后续的动态生成或者删除的dom
    this._obs = new MutationObserver(mutationList => {
      mutationList.length && fn()
    })
    this._obs.observe(document.querySelector('body'), {
      childList: true, // 观察目标子节点的变化，是否有添加或者删除
      attributes: false, // 观察属性变动
      subtree: true // 观察后代节点，默认为 false
    })
  }
  public observerAll() {
    const target = document.querySelectorAll('[data-ubt-expo]')
    this.add(target)
  }
}
