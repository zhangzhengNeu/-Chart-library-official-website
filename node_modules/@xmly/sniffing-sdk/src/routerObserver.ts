/*
 * @Date: 2020-11-17 17:25:52
 * @LastEditTime: 2021-02-04 20:05:40
 * @Descripttion:
 */
import EventEmitter from 'events'
import { routerOptions, RouterObject } from './types'
const routerEventEmitter = new EventEmitter.EventEmitter()
const getRefer = (win: Window) => ({
  hash: win.location.hash,
  host: win.location.host,
  hostname: win.location.hostname,
  href: win.location.href,
  origin: win.location.origin,
  pathname: win.location.pathname
})
let refererTemp = getRefer(window)

export const handleStateChange = (
  callback: (data: any, title: string, url?: string | null | undefined) => void
) => (...args: any) => {
  let referer = getRefer(window)
  callback.apply(window.history, args)
  refererTemp = getRefer(window)
  if (referer.href === window.location.href) return false
  routerEventEmitter.emit('routerChange', {
    currentPath: window.location.pathname,
    refererPath: referer.pathname,
    ext: {
      current: window.location,
      referer,
      action: 'replaceState,pushState'
    }
  })
  return true
}

const handleHashCallback = (hashChangeEvent: HashChangeEvent) => {
  routerEventEmitter.emit('routerChange', {
    currentPath: window.location.hash,
    refererPath: '#' + hashChangeEvent.oldURL.split('#')[1],
    ext: {
      current: window.location,
      refer: hashChangeEvent,
      action: 'hashchange'
    }
  })
}
const handlePopStateCallback = (event: PopStateEvent) => {
  routerEventEmitter.emit('routerChange', {
    currentPath: window.location.pathname,
    refererPath: refererTemp.pathname,
    ext: {
      current: window.location,
      referer: refererTemp,
      action: 'popstate'
    }
  })
  refererTemp = getRefer(window)
}

export default (options: routerOptions = { type: 'browser' }) => {
  if (options.type === 'hash') {
    window.addEventListener('hashchange', handleHashCallback)
  } else {
    const { pushState, replaceState } = window.history
    window.history.pushState = handleStateChange(pushState)
    window.history.replaceState = handleStateChange(replaceState)
    window.addEventListener('popstate', handlePopStateCallback)
  }

  return {
    onChange: (callback: (routerObj: RouterObject) => void) => {
      routerEventEmitter.on('routerChange', callback)
    },
    destory: () => {
      routerEventEmitter.removeAllListeners()
      window.removeEventListener('hashchange', handleHashCallback)
    }
  }
}
