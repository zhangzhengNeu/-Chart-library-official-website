(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.xmrep = {})));
}(this, (function (exports) { 'use strict';

  /**
   * localStorage
   */
  var ls = {
      set: function (key, val) {
          try {
              if (val !== undefined && val !== '' && val !== null) {
                  localStorage.setItem(key, JSON.stringify(val));
              }
              else {
                  localStorage.removeItem(key);
              }
          }
          catch (e) { }
      },
      get: function (key) {
          try {
              var val = localStorage.getItem(key);
              var ret = val && JSON.parse(val);
              return val ? ret : null;
          }
          catch (e) { }
          return null;
      },
  };
  /**
   * sessionStorage
   */
  var ss = {
      set: function (key, val) {
          if (window.sessionStorage) {
              try {
                  window.sessionStorage.setItem(key, val);
              }
              catch (e) { }
          }
      },
      get: function (key) {
          return window.sessionStorage ? window.sessionStorage.getItem(key) : null;
      },
      remove: function (key) {
          window.sessionStorage && window.sessionStorage.removeItem(key);
      },
  };
  /**
   * cookie
   */
  var cookie = {
      set: function (name, val, option) {
          var d;
          var domain = option && option.domain;
          var path = option && option.path || '/';
          if (/ximalaya\.com$/.test(window.location.hostname)) {
              domain = '.ximalaya.com';
          }
          if (option && option.expires) {
              d = new Date();
              d.setTime(d.getTime() + option.expires * 1000);
          }
          var cookieDomain = domain ? "; domain=" + domain : '';
          var cookieExpires = d ? "; expires=" + d.toUTCString() : '';
          var cookieSecure = option && option.secure ? '; secure' : '';
          var cookiePath = path ? "; path=" + path : '';
          var res = name + "=" + val + cookieDomain + cookiePath + cookieExpires + cookieSecure;
          document.cookie = res;
          return res;
      },
      get: function (name) {
          var reg = new RegExp("(^| )" + name + "=([^;]*)(;|$)");
          var re = reg.exec(document.cookie);
          return re ? re[2] : '';
      },
      remove: function (name) {
          this.set(name, '', { expires: -1000 });
      },
  };

  /**  获取时间 */
  function getTimestamp() {
      return +new Date();
  }
  /**
   * 生成uuid
   */
  var dec2hex = "0123456789abcdef";
  function generateUUID() {
      var uuid = "";
      for (var i = 1; i <= 36; i++) {
          if (i === 9 || i === 14 || i === 19 || i === 24) {
              uuid += "-";
          }
          else if (i === 15) {
              uuid += 4;
          }
          else if (i === 20) {
              uuid += dec2hex[(Math.random() * 4) | (0 + 8)];
          }
          else {
              uuid += dec2hex[(Math.random() * 16) | 0];
          }
      }
      return uuid;
  }
  /**
   * 比较两个版本号，需要两个版本号长度相同，1.0 和 1.1 或者 1.0.1 和 1.1.0
   * @param first
   * @param second
   * @return first > second => 1 first === second => 0 first < second => -1
   */
  var compareVersion = function (first, second) {
      var fp = first.split('.');
      var sp = second.split('.');
      var ffp = fp.shift();
      var fsp = sp.shift();
      if (Number(ffp) > Number(fsp))
          return 1;
      if (Number(ffp) < Number(fsp))
          return -1;
      // all parts equals
      if (fp.length === 0 && sp.length === 0) {
          return 0;
      }
      return compareVersion(fp.join('.'), sp.join('.'));
  };

  var isWin = typeof window !== 'undefined';
  /** 运行环境等 */
  var win = isWin ? window : {};
  var loc = win.location || {};
  var nav = isWin ? navigator : {};
  var getScreenInfo = function () {
      var sc = win.screen;
      return sc ? sc.width + "x" + sc.height : '-';
  };
  function isDev() {
      var host = loc ? loc.hostname : '';
      var xenv = win.XMLOG_ENV;
      if (xenv === 'dev') {
          return true;
      }
      if (xenv === 'production' || xenv === 'uat') {
          return false;
      }
      if (/test\.\w+/.test(host)) {
          return true;
      }
      if (/^[0-9\.]+|(?:localhost)$/.test(host)) {
          return true;
      }
      return false;
  }
  function isUat() {
      var host = loc ? loc.hostname : '';
      if (win.XMLOG_ENV === 'uat') {
          return true;
      }
      if (/uat\.\w+/.test(host)) {
          return true;
      }
      return false;
  }

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  var __assign = function() {
      __assign = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };

  function __spreadArrays() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
      return r;
  }

  var apiWhiteList = [
      // nyx 播放统计接口
      /www\.(?:(test|uat)\.)?ximalaya\.com\/nyx/,
      /m\.(?:(test|uat)\.)?ximalaya\.com\/nyx/,
      /websentry\.ximalaya\.com/
  ];

  var prodReportOrigin = 'https://mermaid.ximalaya.com';
  var testReportOrigin = 'https://mermaid.test.ximalaya.com';
  var uatReportOrigin = 'https://mermaid.uat.ximalaya.com';
  var reportOrigin = isDev() ? testReportOrigin : isUat() ? uatReportOrigin : prodReportOrigin;
  var binaryReportUrl = reportOrigin + "/collector-web/web-pl/v1";
  var base64ReportUrl = reportOrigin + "/collector-web/web-pl/v2";
  // TODO: remove XLOG_URL at 2.0.0
  var finalBRUrl = (typeof window !== 'undefined' && window.XLOG_URL)
      ? window.XLOG_URL
      : binaryReportUrl;
  // 上报通用type
  var repTypes = {
      APM: {
          name: 'apm_web',
          // 优先级
          priority: 2,
          // 上报开关key
          switchKey: 'apm',
          subTypes: {
              /** 页面性能 */
              PAGE: 'page',
              /** 网络请求时间 */
              NETWORK: 'network',
              /** 资源加载监控 */
              STATICRESOURCE: 'staticResource'
          },
      },
      SHARE: {
          /** 分享跟踪 */
          name: 'share_web',
          // 优先级大于100会持久化缓存
          priority: 102,
          switchKey: 'share',
          subTypes: {
              /** 分享状态 */
              STATE: 'share_stat_record',
              /** 分享回流 */
              FEEDBACK: 'share_feedback',
          },
      },
      UBT: {
          name: 'ubt_web',
          switchKey: 'ubt',
          priority: 101,
          subTypes: {
              /** 页面曝光 */
              PAGE_VIEW: 'pageview',
              /** 页面离开 */
              PAGE_EXIT: 'pageExit',
              /** 点击跳转 */
              CLICK: 'click',
              /** 点击控件 */
              CLICK_BUTTON: 'clickButton',
              /** 控件滑动曝光*/
              SLIP_PAGE: 'slipPage',
              /** 弹框展示 */
              DIALOG_VIEW: 'dialogView',
              /** 弹框点击 */
              DIALOG_CLICK: 'dialogClick',
          },
      },
  };
  // api监控白名单
  var defaultMonitorWhiteList = __spreadArrays(['xdcs-collector.ximalaya.com', finalBRUrl, binaryReportUrl, base64ReportUrl], apiWhiteList);
  // 网络统计刷新间隔
  var networkInterval = 5 * 1000;
  // 性能、网络统计最大有效时间
  var maxApmValidTime = 2 * 60 * 1000;
  // 上报失败次数限制
  var maxAllowRetryTimes = 3;
  // 最多允许合并上传数量
  var maxAllowSendSize = 5;
  // 合并请求的时间间隔
  var mergeRequestDuration = 1000;
  // 最多允许本地缓存数量
  var maxAllowCacheSize = 20;
  // 采样率
  var defaultSampleRate = isDev() ? 1 : 0.5;
  // api上报个数
  var maxMonitorQueueLength = 5;
  // 上报开关key;
  // 通过xlog.write进行业务数据的写关闭，比如 `apm,ubt`，如果没有则为`__null__` （注意前后两个下划线）
  // 通过xlog.send进行数据上报的关闭 ，比如 `true`表示发送关闭， `false`表示不关闭
  var reportSwitchKey = 'xlog.send';
  var reportWriteKey = 'xlog.write';
  // 获取native信息的key
  var nativeInfoCookieKey = 'xmly_ubt';
  // 缓存唯一设备key;
  var sessionIdKey = '_xmLog';
  // http://thoughts.ximalaya.com/workspaces/5d231b0cbe825bee8c4d9069/docs/5f2bb6cef4c0000001105761
  // export const sessionIdKey = isDev() ? '4&_device' : isUat() ? '6&_device' : '1&_device';
  // sdk相关
  var sdkName = 'xmrep';
  // 版本
  var sdkVersion = '2.2.12';

  /** 缓存uuidID */
  function getUUID() {
      if (!isWin)
          return '';
      var deviceInfo = cookie.get(sessionIdKey);
      var uuid = deviceInfo.split('&')[1];
      if (!uuid) {
          uuid = generateUUID();
          cookie.set(sessionIdKey, "h5&" + uuid + "&" + sdkVersion, {
              expires: 1000 * 24 * 3600 * 365,
          });
      }
      return uuid;
  }

  var detect = function (pattern) {
      return function () {
          return pattern.test(ua);
      };
  };
  var ua = nav.userAgent || '';
  var uaFunc = {
      isAndroid: detect(/android/i),
      isIOS: detect(/(ipad|iphone|ipod)/i),
      isWindows: detect(/window/i),
      isMac: detect(/mac os x/i),
      isChrome: detect(/webkit\W.*(chrome|chromium)\W/i),
      isFirefox: detect(/mozilla.*\Wfirefox\W/i),
      isGecko: detect(/mozilla(?!.*webkit).*\Wgecko\W/i),
      is360se: detect(/360/i),
      isIE: function () {
          if (nav.appName === 'Microsoft Internet Explorer') {
              return true;
          }
          if (detect(/\bTrident\b/)()) {
              return true;
          }
          return false;
      },
      isOpera: detect(/opera.*\Wpresto\W|OPR/i),
      isSafari: detect(/webkit\W(?!.*chrome).*safari\W/i),
      isMobile: detect(/(iphone|ipod|((?:android)?.*?mobile)|blackberry|nokia)/i),
      isWebKit: detect(/webkit\W/i),
      isIting: detect(/iting/i),
      isItingMain: detect(/iting\(main\)/i),
      isWeixin: detect(/micromessenger/i),
      isSinaWeibo: detect(/weibo/i),
      isQQ: detect(/qq/i),
      isQQWeibo: detect(/tencentmicroblog/i),
  };
  var browerInfo = (function () {
      if (!uaFunc.isItingMain()) {
          // 信息仅在 sendByNative 时使用，非主 App 环境可以不必解析
          return {};
      }
      var tem;
      var match = ua.match(/(iting|opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
      if (/trident/i.test(match[1])) {
          tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
          return 'IE ' + (tem[1] || '');
      }
      if (match[1] === 'Chrome') {
          tem = ua.match(/\b(OPR|Edge)\/(\d+)/);
          if (tem != null)
              return tem.slice(1).join(' ').replace('OPR', 'Opera');
      }
      var _a = match[2] ? [match[1], match[2]] : ['Unknown', '0'], agentName = _a[0], agentVersionMajor = _a[1];
      if ((tem = ua.match(/version\/(\d+)/i)) != null) {
          agentVersionMajor = tem[1];
      }
      return { agentName: agentName, agentVersionMajor: agentVersionMajor, userAgent: ua };
  })();

  /** 去除query */
  function getUrl(url) {
      return url || location.href;
  }
  // 获取指定的url参数
  function isUrlPar(k, searchStr) {
      var u = searchStr || window.location.search;
      var reg = new RegExp("(^|&)" + k + "=([^&]*)(&|$)", 'i');
      var r = u.substr(1).match(reg);
      if (r != null) {
          return decodeURI(r[2]);
      }
      return '';
  }
  // 获取url的文件类型
  function getSuffix(url) {
      var index = url.lastIndexOf(".");
      var ext = url.substr(index + 1);
      return ext;
  }

  function isString(str) {
      return typeof str === 'string';
  }
  function trim(str) {
      return str.replace(/(^\s*)|(\s*$)/g, '');
  }
  function merge(a, b, mergeAll) {
      var result = {};
      for (var p in a) {
          if (a.hasOwnProperty(p)) {
              result[p] = a[p];
          }
      }
      for (var q in b) {
          if (b.hasOwnProperty(q)) {
              if (q[0] !== '_' || mergeAll) {
                  result[q] = b[q];
              }
          }
      }
      return result;
  }

  var prevModule;
  var prevPage;
  var enterTime = +new Date();
  var PRE_PAGE_KEY = 'pk_pa';
  var PRE_MODULE_KEY = 'pk_mo';
  /** ubt上报确定来源页 */
  var data = {
      set prevModule(m) {
          prevModule = isString(m) ? m.trim() : undefined;
      },
      get prevModule() {
          return prevModule;
      },
      set prevPage(p) {
          prevPage = isString(p) ? p.trim() : undefined;
      },
      get prevPage() {
          return prevPage;
      },
      get time() {
          return enterTime;
      },
      set time(time) {
          enterTime = time;
      },
  };

  /** bussinessId */
  var bId;
  // 设备id
  var deviceId;
  var appId;
  var SSID_KEY = 'dimpa';
  var SEQ_KEY = 'seq__';
  var old = isWin ? ss.get(SSID_KEY) : 1;
  var sid = old ? +old : 0;
  // 设备识别
  var uuid = getUUID();
  /** 应用相关 */
  var info = {
      get appId() {
          return appId;
      },
      set appId(id) {
          id && (appId = id);
      },
      get bId() {
          return bId;
      },
      set bId(id) {
          id && (bId = id);
      },
      get deviceId() {
          return deviceId || uuid;
      },
      set deviceId(d) {
          d && (deviceId = d);
      },
      /** 设备类别 */
      get deviceType() {
          if (uaFunc.isWeixin()) {
              return 'weixin';
          }
          if (uaFunc.isIting()) {
              return uaFunc.isAndroid() ? 'android' : 'ios';
          }
          if (uaFunc.isSinaWeibo()) {
              return 'weibo';
          }
          if (uaFunc.isQQ()) {
              return 'qq';
          }
          return 'browser';
      },
      get sessionId() {
          if (!sid) {
              sid = getTimestamp();
              try {
                  ss.set(SSID_KEY, "" + sid);
              }
              catch (e) { }
          }
          return sid;
      },
      set sessionId(s) {
          if (s) {
              sid = +s;
              ss.set(SSID_KEY, "" + s);
          }
      },
      set seq(s) {
          if (s) {
              ss.set(SEQ_KEY, "" + s);
          }
      },
      get seq() {
          if (uaFunc.isIting()) {
              var old_1 = +(ss.get(SEQ_KEY) || 0);
              var now = old_1 + 1;
              ss.set(SEQ_KEY, "" + now);
              return now;
          }
          return getTimestamp();
      },
  };
  // 如果在app内打开，初始化参数
  var initApp = function () {
      try {
          var str = cookie.get(nativeInfoCookieKey);
          if (str) {
              // app跳h5
              var infos_1 = "?" + decodeURIComponent(str);
              ['appId', 'deviceId', 'sessionId' /*, 'seq'*/].forEach(function (key) {
                  info[key] = isUrlPar(key, infos_1);
              });
              data.prevPage = isUrlPar('currPage', infos_1);
              data.prevModule = isUrlPar('srcModule', infos_1);
              cookie.remove(nativeInfoCookieKey);
          }
          else {
              // app内h5跳h5
              var preP = ss.get(PRE_PAGE_KEY);
              var preM = ss.get(PRE_MODULE_KEY);
              if (preP) {
                  data.prevPage = preP;
              }
              if (preM) {
                  data.prevModule = preM;
              }
          }
      }
      catch (e) { }
  };

  var cache = {};
  var get = function (key) {
      return cache[key];
  };
  var set = function (key, val) {
      cache[key] = val;
  };

  var logTimeLabel = typeof Symbol !== 'undefined' ? Symbol('logtime') : '__logTime';
  /**  缓存数据生成时间*/
  var formatTimeData = function (item) {
      item[logTimeLabel] = +new Date;
      return item;
  };
  var custom;
  var setCustomCommon = function (v) {
      for (var key in v) {
          var ty = typeof v[key];
          if (ty !== 'string' && ty !== 'number' && ty !== 'undefined' && isDev()) {
              throw new Error("[XLog-ERR] custom props('" + key + "') type should be string or number, but got '" + ty + "'");
          }
      }
      custom = v;
  };
  var getCustomCommon = function () {
      return custom;
  };

  /** 确定待发送item优先级 */
  function findPrority(type) {
      for (var i in repTypes) {
          var t = repTypes[i];
          if (t.name === type) {
              return t.priority;
          }
      }
      return Number.MIN_VALUE;
  }
  var MIN_CACHE_PRIORITY = 100;
  /** 根据优先级确定是否需要缓存 */
  function needCache(data) {
      for (var i in repTypes) {
          var t = repTypes[i];
          if (t.name === data.type) {
              return t.priority >= MIN_CACHE_PRIORITY;
          }
      }
      return false;
  }

  /** 将字符串格式化为UTF8编码的字节 */
  var getUTF8 = function getUTF8(str, isGetBytes) {
    var back = [];
    var byteSize = 0;

    for (var i = 0; i < str.length; i++) {
      var code = str.charCodeAt(i);

      if (0x00 <= code && code <= 0x7f) {
        byteSize += 1;
        back.push(code);
      } else if (0x80 <= code && code <= 0x7ff) {
        byteSize += 2;
        back.push(192 | 31 & code >> 6);
        back.push(128 | 63 & code);
      } else if (0x800 <= code && code <= 0xd7ff || 0xe000 <= code && code <= 0xffff) {
        byteSize += 3;
        back.push(224 | 15 & code >> 12);
        back.push(128 | 63 & code >> 6);
        back.push(128 | 63 & code);
      }
    }

    for (var _i = 0; _i < back.length; _i++) {
      back[_i] &= 0xff;
    }

    if (isGetBytes) {
      return back;
    }

    if (byteSize <= 0xff) {
      return [0, byteSize].concat(back);
    } else {
      return [byteSize >> 8, byteSize & 0xff].concat(back);
    }
  };

  /** long类型数字串 */
  var getInt64Array = function getInt64Array(number) {
    var ret = [];

    while (number > 0) {
      ret.push(number % 0x100);
      number = parseInt(number / 0x100);
    }

    while (ret.length < 8) {
      ret.push(0);
    }

    return ret;
  };

  var getItem = function getItem(item) {
    var type = item.type,
        subType = item.subType,
        msg = item.msg,
        time = item.time;
    var uType = getUTF8(type, true);
    var uSubType = getUTF8(subType, true);
    var uMsg = getUTF8(JSON.stringify(msg), true);
    var uTime = getInt64Array(time);
    var len = uType.length + 2 + uSubType.length + 2 + uMsg.length + 4 + 8
    /* 时间 */
    ;
    return {
      len: len,
      uType: uType,
      uSubType: uSubType,
      uMsg: uMsg,
      uTime: uTime
    };
  };
  var setItem = function setItem(dv, offset, data) {
    var uType = data.uType,
        uSubType = data.uSubType,
        uMsg = data.uMsg,
        uTime = data.uTime;
    dv.setInt16(offset, uType.length, true);
    offset += 2;

    for (var i = 0; i < uType.length; i++) {
      dv.setUint8(offset++, uType[i]);
    }

    dv.setInt16(offset, uSubType.length, true);
    offset += 2;

    for (var _i = 0; _i < uSubType.length; _i++) {
      dv.setUint8(offset++, uSubType[_i]);
    }

    for (var _i2 = 0; _i2 < uTime.length; _i2++) {
      dv.setInt8(offset++, uTime[_i2]);
    }

    dv.setInt32(offset, uMsg.length, true);
    offset += 4;

    for (var _i3 = 0; _i3 < uMsg.length; _i3++) {
      dv.setUint8(offset++, uMsg[_i3]);
    }
  };
  var getGlobal = function getGlobal(data) {
    var uGg = getUTF8(JSON.stringify(data), true);
    return {
      uGg: uGg,
      len: uGg.length + 4
    };
  };
  var setGlobal = function setGlobal(dv, offset, data) {
    var uGg = data.uGg;

    for (var i = 0; i < uGg.length; i++, offset++) {
      dv.setUint8(offset, uGg[i]);
    }

    dv.setInt32(offset, uGg.length, true);
  };

  function getSendData(glob, items) {
    var dataGlobal = getGlobal(glob);
    var dataItems = items.map(getItem);
    var buffer = new ArrayBuffer(dataGlobal.len + dataItems.reduce(function (a, b) {
      return a + b.len;
    }, 0));
    var dv = new DataView(buffer);
    var offset = 0;

    for (var i = 0; i < dataItems.length; i++) {
      setItem(dv, offset, dataItems[i]);
      offset += dataItems[i].len;
    }

    setGlobal(dv, offset, dataGlobal);
    return dv.buffer;
  }

  var encodeToBinary = function (global, items) {
      return getSendData(global, items);
  };
  var encodeBufferToBase64 = function (buffer) {
      var binary = "";
      var bytes = new Uint8Array(buffer);
      var len = bytes.byteLength;
      for (var i = 0; i < len; i++) {
          binary += String.fromCharCode(bytes[i]);
      }
      return btoa(binary);
  };

  var isBeaconAvailable = Boolean(typeof window !== "undefined" && navigator && navigator.sendBeacon);
  var send = function (opts) {
      var url = opts.url, data = opts.data, _a = opts.isOctetData, isOctetData = _a === void 0 ? false : _a, _b = opts.useBeacon, useBeacon = _b === void 0 ? false : _b;
      var beaconStatus;
      if (useBeacon && isBeaconAvailable) {
          try {
              beaconStatus = navigator.sendBeacon(url, data);
              return null;
          }
          catch (err) {
              beaconStatus = false;
          }
      }
      if (!useBeacon || !beaconStatus) {
          var xhr = new XMLHttpRequest();
          xhr.open("POST", url, true);
          xhr.setRequestHeader("content-type", isOctetData ? "application/octet-stream" : "application/json");
          xhr.withCredentials = true;
          xhr.send(data);
          return xhr;
      }
      return null;
  };

  var iframe;
  function loadUrl(url) {
      if (iframe) {
          document.documentElement.removeChild(iframe);
      }
      iframe = document.createElement('iframe');
      iframe.setAttribute('width', '0');
      iframe.style.display = 'none';
      iframe.setAttribute('src', url);
      document.documentElement.appendChild(iframe);
      setTimeout(function () {
          iframe && document.documentElement.removeChild(iframe);
          iframe = null;
      }, 0);
  }
  function oldVersion(now, com) {
      var nowArr = now.split('.');
      var comArr = com.split('.');
      if (!+nowArr[0] || !+comArr[0])
          return false;
      if (+nowArr[0] < +comArr[0])
          return true;
      if (+nowArr[0] > +comArr[0])
          return false;
      return oldVersion(nowArr.slice(1).join('.'), comArr.slice(1).join('.'));
  }
  // ios 6.6.9之前版本可能会闪退
  var bugVersions = function () {
      var matches = ua.match(/iting.+(\d{1,}\.\d{1,}\.\d{1,}).+ios/);
      if (!uaFunc.isIOS() || !matches) {
          return false;
      }
      return oldVersion(matches[1], '6.6.9');
  };
  var getVersion = function () {
      return (ua.match(/iting.+(\d{1,}\.\d{1,}\.\d{1,})/) || [, null])[1];
  };
  /** 永远与native同步ubt中seq、currPage等信息 */
  function notifyNative(currPage, srcModule) {
      if (srcModule === void 0) { srcModule = ''; }
      if (!uaFunc.isIting() || bugVersions()) {
          return;
      }
      // iOS 版本低于 6.7.9 弹屏内的页面同步信息会导致弹屏关闭
      // http://thoughts.ximalaya.com/workspaces/5dc4c8a54cfb7900134fcc8f/docs/5f3df1fef4c00000012a7ac3#5f3e10d2595de2f511cc38f6
      if (uaFunc.isIOS()) {
          var appVersion = getVersion();
          if (appVersion !== null && compareVersion(appVersion, '6.7.9') < 0) {
              return;
          }
      }
      // 本地缓存  防止H5跳H5丢失prePage
      if (currPage) {
          ss.set(PRE_PAGE_KEY, currPage);
      }
      if (srcModule) {
          ss.set(PRE_MODULE_KEY, srcModule);
      }
      var query = encodeURIComponent("currPage=" + currPage + "&srcModule=" + srcModule);
      var schema = "iting://sync.xmly.ubt?_ka=1&data=" + query;
      loadUrl(schema);
  }
  function canSendByNative() {
      // 非主 App 环境下
      if (!uaFunc.isItingMain()) {
          return false;
      }
      var appVersion = getVersion();
      // 解析版本异常
      if (appVersion === null) {
          return false;
      }
      // 主 App 支持接口版本
      // http://thoughts.ximalaya.com/workspaces/5e58afa52d54160012c3eab5/docs/5ed61b56f4c0000001d632e3
      if (uaFunc.isIOS() || uaFunc.isAndroid()) {
          return compareVersion(appVersion, '6.7.12') >= 0;
      }
      return false;
  }
  /**
   * 通过 Blob 计算字符串在 utf-8 编码下的体积
   * @param {string} str
   * @returns
   */
  function sizeOf(str) {
      return typeof Blob !== "undefined"
          ? new Blob([str], { type: "text/plain" }).size
          : str.length;
  }
  function sendByNative(sessionId, type, subType, common, data$$1) {
      var commonStr = encodeURIComponent(JSON.stringify(common));
      var logStr = encodeURIComponent(JSON.stringify(data$$1));
      var url = "time=" + +new Date() + "&&type=" + type + "&&subType=" + subType + "&&sId=" + (sessionId || 1) + "&&c=" + commonStr + "&&logstr=" + logStr;
      var schema = "iting://sync.xmly.xlog?_ka=1&data=" + encodeURIComponent(url);
      // URL 长度超过 4k 会发生截断
      if (sizeOf(schema) > 4096) {
          return false;
      }
      loadUrl(schema);
      return true;
  }

  var Report = /** @class */ (function () {
      function Report() {
          this.unloaded = false;
          this.sendList = []; // 待发送队列
          this.pendingList = []; // 发送中队列
          this.failedList = []; // 发送失败队列
          this.retryTimes = 0;
          /** 业务数据的写关闭字段 */
          this.stopKeys = '';
          /** 是否可以上报 */
          this.canReport = true;
          this.init();
          this.initLoop();
      }
      /** 恢复缓存数据 */
      Report.prototype.init = function () {
          var data = ls.get(Report.CACHE_KEY);
          if (data && data.length) {
              this.pushSendList(data);
              if (!this.checkSending()) {
                  this.sendNext(true);
              }
          }
      };
      // 初始化计时器，用于从时间纬度对上报数据进行合并
      Report.prototype.initLoop = function () {
          var _this = this;
          setInterval(function () {
              if (!_this.checkSending() && _this.sendList.length > 0) {
                  _this.sendNext();
              }
          }, mergeRequestDuration);
      };
      Report.prototype.send = function (data, sync) {
          if (this.canReport && (!this.stopKeys || !~this.stopKeys.indexOf(data.type.switchKey))) {
              this.addSend(data, sync);
          }
      };
      Report.prototype.sendByNative = function (data, sync) {
          var da = data.data[0];
          delete da[logTimeLabel];
          var env = this.formatData([], true).env;
          var result = sendByNative(da.sessionId, data.type.name, data.subType, env, da);
          if (result === false) {
              this.send(data, sync);
          }
      };
      Report.prototype.flush = function () {
          this.unloaded = true;
          if (this.canReport && !this.checkSending()) {
              // 结束时没有待发送，直接强制
              this.pushSendList(this.failedList);
              this.failedList.length = 0;
              this.sendNext(true);
          }
      };
      Report.prototype.checkSending = function () {
          return this.pendingList.length !== 0;
      };
      Report.prototype.sendNext = function (force) {
          if (!this.canReport) {
              return;
          }
          var list = this.sendList;
          if (list.length) {
              // 取出待发送队列中的 5 条数据进行合并上传
              var data = this.pendingList = list.splice(list.length - maxAllowSendSize, list.length);
              this.report(this.formatData(data), force);
              this.cacheSendList();
          }
      };
      Report.prototype.addSend = function (data, force) {
          if (this.retryTimes > maxAllowRetryTimes) {
              return;
          }
          this.pushSendList(this.formatDataItem(data));
          if (!this.checkSending()) {
              if (force || this.unloaded) {
                  this.sendNext(true);
              }
          }
          else {
              this.cacheSendList();
          }
      };
      Report.prototype.pushSendList = function (list) {
          // 数据倒叙排列，优先发送队尾数据
          this.sendList = this.sendList.concat(list).sort(function (a, b) {
              return findPrority(b.type) - findPrority(a.type) || b.time - a.time;
          });
      };
      Report.prototype.cacheSendList = function () {
          var cacheList = this.failedList.concat(this.sendList).filter(needCache);
          var len = cacheList.length;
          ls.set(Report.CACHE_KEY, len ? cacheList.slice(len - maxAllowCacheSize, len) : null);
      };
      /** 字节序列上传必须固定格式 */
      Report.prototype.report = function (data, force) {
          var _this = this;
          if (isDev()) {
              console.log('[XLOG] sending data:', JSON.parse(JSON.stringify(data)));
          }
          var binary = encodeToBinary(data.env, data.items.slice());
          if (force) {
              // 在 iOS 设备上，页面退出时使用 sendBeacon 发送 buffer 会丢失请求体导致服务端解析失败，发送字符串不会有这个问题
              if (uaFunc.isIOS() || uaFunc.isMac()) {
                  var base64 = encodeBufferToBase64(binary);
                  send({
                      url: base64ReportUrl,
                      data: base64,
                      useBeacon: true,
                  });
              }
              else {
                  send({
                      url: finalBRUrl,
                      data: binary,
                      isOctetData: true,
                      useBeacon: true,
                  });
              }
              // 清空发送中队列
              this.pendingList.length = 0;
              return;
          }
          var dealed = false;
          var xhr = send({
              url: finalBRUrl,
              data: binary,
              isOctetData: true,
          });
          xhr.onerror = xhr.onreadystatechange = function () {
              if (xhr.readyState !== 4 || dealed || _this.unloaded) {
                  return;
              }
              dealed = true;
              if (xhr.status !== 200) {
                  _this.retryTimes++;
                  _this.failedList = _this.failedList.concat(_this.pendingList);
                  // 如果有待发送，在发送后再缓存
                  if (!_this.sendList.length) {
                      _this.cacheSendList();
                  }
              }
              else {
                  try {
                      var stopKeys = xhr.getResponseHeader(reportWriteKey) || '';
                      var switchKey = xhr.getResponseHeader(reportSwitchKey) || '';
                      _this.stopKeys = stopKeys;
                      // false 可以上报
                      _this.canReport = !/true/.test(switchKey);
                  }
                  catch (e) {
                      _this.retryTimes = maxAllowRetryTimes;
                  }
              }
              // 清空发送中队列
              _this.pendingList.length = 0;
          };
      };
      Report.prototype.formatDataItem = function (item) {
          return item.data.map(function (it) {
              var time = it[logTimeLabel];
              delete it[logTimeLabel];
              return {
                  time: time,
                  subType: item.subType,
                  type: item.type.name,
                  msg: it,
              };
          });
      };
      Report.prototype.formatData = function (items, nativeChannel) {
          if (nativeChannel === void 0) { nativeChannel = false; }
          var env = {
              dt: info.deviceType,
              bid: info.bId,
              page_url: getUrl(),
              ext: getCustomCommon(),
          };
          if (nativeChannel) {
              env._ct_ = "h5";
              Object.assign(env, browerInfo);
          }
          else {
              env.appId = info.appId;
              env.deviceId = info.deviceId;
              env.clientSendTime = +new Date();
          }
          return { items: items, env: env };
      };
      Report.CACHE_KEY = '_apml';
      return Report;
  }());
  var ops = new Report();
  /**
   * 数据上报
   * @param  data {any} 上报数据
   * @param  force {boolean} 是否强制立即发送
   */
  function report(data, force) {
      if (canSendByNative()) {
          ops.sendByNative(data, force);
      }
      else {
          ops.send(data, force);
      }
  }
  var reportObj = ops;

  /**
   * 判断是否http(s)协议
   */
  var isHttp = function (url) {
      return /https?/.test(url);
  };
  /**
   * 去除url查询参数、去除末尾/
   */
  var cleanUrl = function (url) {
      return url.replace(/([^?]*)(\?|!).+/, '$1').replace(/\/$/, '');
  };
  /**
   * 去除url中的数字，除非带有v|V|app
   */
  var cleanUrlNumber = function (url) {
      return url.replace(/\/[^/vV(app)]+\d+/g, '');
  };
  /**
   * 删除无用time数据，避免干扰(小于等于0或大于最大值)
   */
  var cleanTime = function (data) {
      for (var key in data) {
          var val = data[key];
          if (typeof val === 'number') {
              data[key] = val | 0;
              if (isNaN(data[key]) || data[key] <= 0 || data[key] >= maxApmValidTime) {
                  delete data[key];
              }
          }
      }
  };
  /** 过滤在白名单内url（不上报） */
  var cleanWhiteList = function (url, whiteList) {
      if (!url || !url.indexOf) {
          return true;
      }
      var isInWhiteList = false;
      for (var i = 0; i < whiteList.length; i++) {
          var it = whiteList[i];
          if (typeof it === 'string') {
              isInWhiteList = !!~url.indexOf(it);
          }
          else if (it.test) {
              isInWhiteList = it.test(url);
          }
          if (isInWhiteList) {
              break;
          }
      }
      return isInWhiteList;
  };

  /**
   * 页面加载时间、渲染数据
   */
  var PageLoad = /** @class */ (function () {
      function PageLoad(opt) {
          this.performance = window.performance;
          this.fnRouteMap = opt.fnRouteMap;
      }
      PageLoad.prototype.start = function () {
          var _this = this;
          if (this.check()) {
              window.addEventListener('load', function () {
                  try {
                      var data = _this.getData();
                      if (data) {
                          report(data);
                      }
                  }
                  catch (e) {
                      //
                  }
              });
          }
      };
      PageLoad.prototype.check = function () {
          return (window.addEventListener
              && this.performance
              && this.performance.timing);
      };
      PageLoad.prototype.getData = function () {
          var performance = this.performance;
          var timing = performance.timing;
          var startTime = timing.navigationStart || timing.fetchStart;
          var metrics = {
              ttfb: timing.responseStart - startTime,
              dns: timing.domainLookupEnd - timing.domainLookupStart,
              tcp: timing.connectEnd - timing.connectStart,
              contentTime: timing.responseEnd - timing.responseStart,
              domComplete: timing.domContentLoadedEventStart - timing.responseEnd,
              dom: timing.domContentLoadedEventStart - startTime,
              load: timing.loadEventStart - startTime,
              resourceLoad: (timing.loadEventStart - startTime) - (timing.domContentLoadedEventStart - startTime) // 资源加载
          };
          if (performance.getEntries) {
              var per = performance.getEntries().filter(function (item) { return item.entryType === 'paint'; })[1];
              per && (metrics.fcp = per.startTime | 0);
          }
          cleanTime(metrics);
          var data = {
              metrics: metrics,
              params: {},
              dimensions: {
                  pageName: this.fnRouteMap(location.href),
                  protocol: location.protocol.replace(':', ''),
              },
          };
          var sendData = {
              data: [formatTimeData(data)],
              type: repTypes.APM,
              subType: repTypes.APM.subTypes.PAGE,
          };
          return startTime > 0 ? sendData : null;
      };
      return PageLoad;
  }());

  /**
   * 监控api， 入侵fetch/XMLHttpRequest
   */
  var RequestHook = /** @class */ (function () {
      function RequestHook(_a) {
          var whiteList = _a.whiteList, maxQueueLength = _a.maxQueueLength;
          this.whiteList = whiteList || [];
          this.dataQueue = [];
          this.MAX_ALLOW_SIZE = maxQueueLength || 1;
      }
      RequestHook.prototype.start = function () {
          this.hookXhr();
          this.hookFetch();
      };
      RequestHook.prototype.hookFetch = function () {
          var _this = this;
          var old = window.fetch;
          if (!old) {
              return;
          }
          window.fetch = function (url, options) {
              var t = +new Date();
              return old(url, options).then(function (res) {
                  var requestUrl = typeof url === 'string' ? url : url.url;
                  if (isHttp(requestUrl)) {
                      _this.report({
                          type: 'fetch',
                          time: (+new Date()) - t,
                          status: res.status,
                          url: cleanUrl(typeof url === 'string' ? url : url.url),
                      });
                  }
                  return Promise.resolve(res);
              }).catch(function (e) {
                  _this.report({
                      type: 'fetch',
                      time: (+new Date()) - t,
                      status: 0,
                      url: cleanUrl(typeof url === 'string' ? url : url.url),
                  });
                  throw e;
              });
          };
          // eslint-disable-next-line
          window.fetch.toString = function () {
              return 'fetch() { [native code] }';
          };
      };
      RequestHook.prototype.hookXhr = function () {
          var that = this;
          var oldOpen = XMLHttpRequest.prototype.open;
          XMLHttpRequest.prototype.open = function open(method, url, bool) {
              this.__url = url;
              oldOpen.apply(this, [method, url, bool]);
          };
          var oldSend = XMLHttpRequest.prototype.send;
          XMLHttpRequest.prototype.send = function send(data) {
              var _this = this;
              var t = +new Date();
              var url = cleanUrl(this.__url);
              this.addEventListener('readystatechange', function () {
                  if (_this.readyState === 4) {
                      if (isHttp(url)) {
                          that.report({
                              url: url,
                              type: 'xhr',
                              time: (+new Date()) - t,
                              status: _this.status,
                          });
                      }
                  }
              }, false);
              var repErr = function () {
                  that.report({
                      url: url,
                      type: 'xhr',
                      time: (+new Date()) - t,
                      status: 0,
                  });
              };
              this.addEventListener('error', repErr, false);
              this.addEventListener('abort', repErr, false);
              this.addEventListener('timeout', repErr, false);
              try {
                  oldSend.apply(this, [data]);
              }
              catch (e) {
                  repErr();
                  throw e;
              }
          };
      };
      // 数据收集上报
      RequestHook.prototype.report = function (data) {
          var url = data.url, type = data.type, status = data.status, duration = data.time;
          url = cleanUrlNumber(url);
          if (cleanWhiteList(url, this.whiteList)) {
              return;
          }
          // 修改数据格式
          var networkDate = {
              dimensions: { url: url, type: type, status: String(status) },
              params: {},
              metrics: { duration: duration }
          };
          this.dataQueue.push(formatTimeData(networkDate));
          if (this.dataQueue.length >= this.MAX_ALLOW_SIZE) {
              report({
                  type: repTypes.APM,
                  subType: repTypes.APM.subTypes.NETWORK,
                  data: this.dataQueue,
              });
              this.dataQueue = [];
          }
      };
      return RequestHook;
  }());

  var ResourceStatusType;
  (function (ResourceStatusType) {
      ResourceStatusType["SUCCESS"] = "0";
      ResourceStatusType["FAIL"] = "1";
  })(ResourceStatusType || (ResourceStatusType = {}));
  /**
   * 监控页面、资源（静态资源、api接口）网络情况
   */
  var ResourceTiming = /** @class */ (function () {
      function ResourceTiming(config) {
          var _this = this;
          this.whiteList = [];
          this.maxQueueLength = 0;
          this.offset = 0;
          this.errorList = [];
          this.timings = [];
          // 处理资源加载错误
          this.handleResourceError = function (e) {
              // 过滤js error
              var target = e.target || e.srcElement;
              var isElementTarget = target instanceof HTMLScriptElement ||
                  target instanceof HTMLLinkElement ||
                  target instanceof HTMLImageElement ||
                  target instanceof HTMLVideoElement ||
                  target instanceof HTMLAudioElement;
              if (isElementTarget) {
                  var url = cleanUrl(target.src || target.href);
                  var type = getSuffix(url);
                  // 过滤可能不是资源类型的后缀（比如接口信息）
                  if (type.length > 4)
                      return;
                  _this.errorList.push(url);
                  var apmData = {
                      dimensions: {
                          url: url,
                          type: type,
                          status: ResourceStatusType.FAIL,
                      },
                      metrics: {
                          duration: 0,
                      },
                      params: {},
                  };
                  _this.report([formatTimeData(apmData)]);
              }
          };
          this.maxQueueLength = config.maxQueueLength;
          this.whiteList = config.whiteList;
          this.errorList = [];
      }
      ResourceTiming.prototype.start = function () {
          if (this.checkAvailable()) {
              // window.addEventListener('load', () => {
              //   setTimeout(() => {
              //     this.collect();
              //   }, networkInterval);
              // })
              window.addEventListener("error", this.handleResourceError, true);
          }
      };
      ResourceTiming.prototype.checkAvailable = function () {
          return !!(window.performance &&
              window.performance.getEntries &&
              window.performance.getEntriesByType &&
              window.addEventListener);
      };
      // 收集数据
      ResourceTiming.prototype.collect = function () {
          var _this = this;
          var times = this.getTimes();
          var nowLength = this.timings.length;
          var newLength = times.length;
          var remain = this.maxQueueLength - nowLength;
          if (newLength < remain) {
              this.timings = this.timings.concat(times);
              this.offset += newLength;
          }
          else {
              var da = this.timings
                  .concat(times.slice(0, remain))
                  .map(this.formatTiming);
              this.report(da);
              this.timings = [];
              this.offset += remain;
          }
          setTimeout(function () {
              _this.collect();
          }, networkInterval);
      };
      // 上报
      ResourceTiming.prototype.report = function (data) {
          report({
              data: data,
              type: repTypes.APM,
              subType: repTypes.APM.subTypes.STATICRESOURCE,
          });
      };
      // 获取新的resourceTiming
      ResourceTiming.prototype.getTimes = function () {
          var _this = this;
          return performance
              .getEntries()
              .filter(function (item) { return !cleanWhiteList(item.name, _this.whiteList); })
              // paint类型无需网络请求
              .filter(function (item) { return item.entryType !== "paint"; })
              // 过滤出静态资源
              .filter(function (item) { return item.entryType === "resource"; })
              // 过滤fetch请求
              .filter(function (item) { return item.initiatorType !== "fetch"; })
              // 过滤ajax请求
              .filter(function (item) { return item.initiatorType !== "xmlhttprequest"; })
              // 把请求失败的资源过滤
              .filter(function (item) { return _this.errorList.indexOf(item.name) === -1; })
              .slice(this.offset);
      };
      // 整合成功数据
      ResourceTiming.prototype.formatTiming = function (item) {
          var data = {
              dnsTime: item.domainLookupEnd - item.domainLookupStart,
              connectionTime: item.connectEnd - item.connectStart,
              ttfb: item.responseStart - item.requestStart,
              latency: item.responseStart - item.fetchStart,
              contentTime: item.responseEnd - item.responseStart,
              responseHeaderCount: item.transferSize - item.encodedBodySize,
              responseBodyCount: item.encodedBodySize - 0,
          };
          cleanTime(data);
          data.url = cleanUrl(item.name);
          var fileType = getSuffix(data.url);
          var apmData = {
              dimensions: {
                  url: data.url,
                  type: fileType,
                  status: ResourceStatusType.SUCCESS,
                  duration: data.contentTime,
              },
              metrics: {},
              params: {},
          };
          return formatTimeData(apmData);
      };
      return ResourceTiming;
  }());

  var init = function (_a) {
      var name = _a.name, _b = _a.type, type = _b === void 0 ? 6 : _b, _c = _a.sampleRate, sampleRate = _c === void 0 ? defaultSampleRate : _c, _d = _a.routeMap, routeMap = _d === void 0 ? function () { return "-"; } : _d, _e = _a.requestMonitorWhitelist, requestMonitorWhitelist = _e === void 0 ? [] : _e, _f = _a.maxRequestMonitorQueueLength, maxRequestMonitorQueueLength = _f === void 0 ? maxMonitorQueueLength : _f, _g = _a.resourceMonitorWhitelist, resourceMonitorWhitelist = _g === void 0 ? [] : _g, _h = _a.maxResourceMonitorQueueLength, maxResourceMonitorQueueLength = _h === void 0 ? maxMonitorQueueLength : _h;
      if (typeof name !== "string") {
          throw new Error("[xmrep#APM]: 配置项 name 是必填项且须为字符串类型");
      }
      var currentCommon = getCustomCommon() || {};
      setCustomCommon(__assign(__assign({}, currentCommon), { appName: name }));
      if (type & 2 && Math.random() <= sampleRate) {
          new PageLoad({ fnRouteMap: routeMap }).start();
      }
      if (type & 4 && Math.random() <= sampleRate) {
          new RequestHook({
              maxQueueLength: maxRequestMonitorQueueLength,
              whiteList: __spreadArrays(requestMonitorWhitelist, defaultMonitorWhiteList),
          }).start();
      }
      if (type & 8 && Math.random() <= sampleRate) {
          new ResourceTiming({
              maxQueueLength: maxResourceMonitorQueueLength,
              // resource性能数据包括api
              whiteList: __spreadArrays(resourceMonitorWhitelist, defaultMonitorWhiteList),
          }).start();
      }
  };
  var apm = { init: init };

  // === XMLOG环境信息 ===
  function getEnvInfo() {
      var info = {
          ua: ua,
          os: '',
          device: '',
          browser: '',
          resolution: getScreenInfo(),
          trackType: ('ontouchstart' in win ? 'H5' : 'web'),
          // http://gitlab.ximalaya.com/FEA/apm/master/issues/3
          siteType: uaFunc.isIting() ? 'onPage' : 'offPage',
      };
      if (uaFunc.isMobile()) {
          info.device = 'mobile';
          if (uaFunc.isAndroid()) {
              info.os = 'android';
          }
          if (uaFunc.isIOS()) {
              info.os = 'Ios';
          }
          if (uaFunc.isIting()) {
              info.browser = 'iting';
          }
          if (uaFunc.isWeixin()) {
              info.browser = 'weixin';
          }
          if (uaFunc.isSinaWeibo()) {
              info.browser = 'sinaBlog';
          }
          if (uaFunc.isQQ()) {
              info.browser = 'qq';
          }
          if (uaFunc.isQQWeibo()) {
              info.browser = 'qqBlog';
          }
      }
      else {
          info.device = 'pc';
          if (uaFunc.isWindows()) {
              info.os = 'windows';
          }
          if (uaFunc.isMac()) {
              info.os = 'mac';
          }
          if (uaFunc.isChrome()) {
              info.browser = 'chrome';
          }
          if (uaFunc.isFirefox()) {
              info.browser = 'firefox';
          }
          if (uaFunc.isIE()) {
              info.browser = 'ie';
          }
          if (uaFunc.isOpera()) {
              info.browser = 'opera';
          }
          if (uaFunc.isSafari()) {
              info.browser = 'safari';
          }
          if (uaFunc.is360se()) {
              info.browser = '360';
          }
      }
      return info;
  }

  var url = loc.protocol + "//xdcs-collector." + (isDev() ? 'test.' : '') + "ximalaya.com/api/v1/statistics";
  var sid$1 = getUUID();
  var env = getEnvInfo();

  var CACHE_KEY = '_xmlog_cache';
  var XMLogReport = /** @class */ (function () {
      function XMLogReport() {
          this.isSending = false;
          this.pendingData = [];
          this.failData = [];
      }
      XMLogReport.prototype.checkSending = function () {
          return this.isSending;
      };
      XMLogReport.prototype.send = function (data) {
          this.addSend(data);
      };
      XMLogReport.prototype.flush = function () {
          if (navigator.sendBeacon) {
              if (this.isSending && this.pendingData.length) {
                  navigator.sendBeacon(url, JSON.stringify(this.formatData(this.pendingData)));
                  this.pendingData.length = 0;
              }
              if (!this.isSending && this.failData.length) {
                  navigator.sendBeacon(url, JSON.stringify(this.formatData(this.failData)));
                  this.failData.length = 0;
              }
              this.saveData();
          }
      };
      XMLogReport.prototype.init = function () {
          var _this = this;
          var data = ls.get(CACHE_KEY);
          if (data && data.length) {
              this.addSend(data);
          }
          // 避免重复监听
          this.timer && clearInterval(this.timer);
          this.timer = setInterval(function () {
              if (!_this.isSending && _this.pendingData.length > 0) {
                  _this.sendNext();
              }
          }, 1e3);
      };
      XMLogReport.prototype.addSend = function (data) {
          this.pendingData = this.pendingData.concat(data);
          this.saveData();
      };
      XMLogReport.prototype.report = function (data) {
          var _this = this;
          if (window.XMLHttpRequest) {
              var xhr_1 = new XMLHttpRequest();
              this.isSending = true;
              try {
                  xhr_1.open('POST', url, true);
                  xhr_1.withCredentials = true;
                  xhr_1.setRequestHeader('Content-Type', 'application/json');
                  xhr_1.onerror = xhr_1.onreadystatechange = function () {
                      if (xhr_1.readyState !== 4) {
                          return;
                      }
                      if (xhr_1.status === 200) {
                          _this.saveData();
                      }
                      else {
                          _this.failData = _this.failData.concat(data);
                      }
                      _this.isSending = false;
                  };
                  xhr_1.send(JSON.stringify(this.formatData(data)));
              }
              catch (e) {
                  this.failData = this.failData.concat(data);
                  this.isSending = false;
              }
          }
      };
      XMLogReport.prototype.sendNext = function () {
          if (this.pendingData.length) {
              this.report(this.pendingData.slice());
              this.pendingData.length = 0;
          }
      };
      XMLogReport.prototype.formatData = function (data) {
          return {
              events: data,
          };
      };
      XMLogReport.prototype.saveData = function () {
          var data = this.pendingData.concat(this.failData);
          if (data.length) {
              ls.set(CACHE_KEY, data);
          }
          else {
              ls.set(CACHE_KEY, null);
          }
      };
      return XMLogReport;
  }());
  var instance = new XMLogReport();

  function parseReferrer() {
      var engReg = /(baidu|so|sogou|google|bing|sm)/;
      var keyReg = /(?:^|&)(wd|q|query|keyword|word)=([^&]*)(?:&|$)/;
      var refInfo = {
          refr_source: 'other',
          refr_medium: '',
          refr_term: '',
          refr_from: '',
          referer_url: '',
      };
      var referrer = document.referrer;
      var a = document.createElement('a');
      a.href = referrer;
      if (referrer) {
          refInfo.referer_url = a.href;
          var hostname = a.hostname;
          var search = a.search.slice(1);
          var isFromSE = engReg.test(hostname);
          var hostArr = hostname.match(engReg);
          // 如果来自搜索引擎
          if (isFromSE) {
              refInfo.refr_source = 'search';
              refInfo.refr_medium = hostArr ? hostArr[1] : '';
              // 如果 referrer 有查询参数
              if (search) {
                  // 如果匹配到keyReg关键词的key，则设置utm_term
                  var keyArray = search.match(keyReg);
                  if (keyArray) {
                      refInfo.refr_term = decodeURIComponent(keyArray[2]);
                  }
                  // 拿到from参数
                  if (keyArray = search.match(/(?:^|&)(from)=([^&]*)(?:&|$)/)) {
                      refInfo.refr_from = decodeURIComponent(keyArray[2]);
                  }
              }
          }
      }
      var os = env.os;
      if (os === 'android' || os === 'ios') {
          switch (env.browser) {
              case 'iting':
                  refInfo.refr_source = 'internal';
                  refInfo.refr_medium = 'iting';
                  break;
              case 'weixin':
                  refInfo.refr_source = 'social';
                  refInfo.refr_medium = 'weixin';
                  break;
              case 'qq':
                  refInfo.refr_source = 'social';
                  refInfo.refr_medium = 'qq';
                  break;
              case 'sinaBlog':
                  refInfo.refr_source = 'social';
                  refInfo.refr_medium = 'sinaBlog';
                  break;
              case 'qqBlog':
                  refInfo.refr_source = 'social';
                  refInfo.refr_medium = 'qqBlog';
                  break;
          }
      }
      return refInfo;
  }

  /** 搜集环境数据 */
  function collectData() {
      var browser = {
          br_userAgent: env.ua,
          br_type: env.browser,
          br_viewSize: env.resolution,
          page_url: location.href,
          page_title: document.title,
          os: env.os,
          trackType: env.trackType,
          siteType: env.siteType,
      };
      // refferrer
      var referrer = merge(parseReferrer(), browser);
      // 营销数据
      var traffic = merge({ x_xmly_traffic: parseReferrer() }, referrer);
      return traffic;
  }

  var temData = {};
  var Tracker = /** @class */ (function () {
      function Tracker(commonProps, val) {
          this.init(commonProps, val);
          instance.init();
      }
      Tracker.prototype.init = function (commonProps, val) {
          var _a;
          if (typeof commonProps === 'string') {
              this.commonProps = (_a = {},
                  _a[commonProps] = val,
                  _a);
          }
          else {
              this.commonProps = commonProps;
          }
          for (var name in this.commonProps) {
              if (name === 'item') {
                  temData.page = this.commonProps[name];
              }
              if (name === 'itemId') {
                  temData.pageId = this.commonProps[name];
              }
          }
      };
      Tracker.prototype.pageView = function (extraData) {
          var data = this.mergeCommon();
          data = merge(data, extraData);
          data = merge(getTracert(), data);
          data.serviceId = 'pageview';
          data.appName = data.appName || window.XMLOG_APPNAME || 'event';
          this.report(data);
      };
      Tracker.prototype.event = function (extraData) {
          var data = this.mergeCommon();
          // 事件中 如果没有srcPage，则使用当前页的item ,有则使用自定义值
          data.srcPage = data.srcPage || this.commonProps.item;
          data.srcPageId = data.srcPageId || this.commonProps.itemId;
          // 记录点击位置坐标
          temData.module = extraData.srcModule || '';
          temData.postion = extraData.srcPosition || '';
          data = merge(data, extraData);
          data.appName = data.appName || window.XMLOG_APPNAME || 'event';
          this.report(data);
      };
      /** 整合环境变量 */
      Tracker.prototype.mergeCommon = function () {
          var common = merge({
              uuid: sid$1,
          }, this.commonProps);
          return merge(common, collectData());
      };
      /** 上报 */
      Tracker.prototype.report = function (data) {
          instance.send(this.format(data));
      };
      /** 格式化数据 */
      Tracker.prototype.format = function (data) {
          var props = Object.keys(data).reduce(function (p, key) {
              // 清理空值字段
              if (data[key] != null && data[key] !== '') {
                  p[key] = data[key];
              }
              return p;
          }, {});
          var res = {
              _key: generateUUID(),
              props: props,
              ts: getTimestamp(),
          };
          return res;
      };
      return Tracker;
  }());
  function getTracert() {
      var info = {
          srcPage: ss.get('srcPage') || '',
          srcPageId: ss.get('srcPageId') || '',
          srcModule: ss.get('srcModule') || '',
          srcPosition: ss.get('srcPosition') || '',
      };
      return info;
  }

  var XmLog = /** @class */ (function () {
      function XmLog(commonProps) {
          this.tracker = new Tracker(commonProps);
      }
      XmLog.init = function (commonProps, val) {
          XmLog.defaultTracker.init(commonProps, val);
      };
      XmLog.event = function (props) {
          XmLog.defaultTracker.event(props);
      };
      XmLog.pageView = function (props) {
          XmLog.defaultTracker.pageView(props);
      };
      XmLog.pageview = function (props) {
          XmLog.defaultTracker.pageView(props);
      };
      XmLog.prototype.event = function (props) {
          this.tracker.event(props);
      };
      XmLog.prototype.pageview = function (props) {
          this.tracker.pageView(props);
      };
      XmLog.prototype.pageView = function (props) {
          this.tracker.pageView(props);
      };
      /** 默认 */
      XmLog.defaultTracker = new Tracker({});
      return XmLog;
  }());
  var xmLog = XmLog;

  var UBT_PAGE_VIEW_CACHE_KEY = 'ubt:pageview';

  /** 通用ubt上报 */
  function event(metaId, serviceId, extra, force) {
      for (var key in extra) {
          var ty = typeof extra[key];
          if (ty !== 'string' && ty !== 'number' && ty !== 'undefined' && isDev()) {
              throw new Error("[XLog-ERR] event props('" + key + "') type should be string or number, but got '" + ty + "'");
          }
      }
      report({
          type: repTypes.UBT,
          subType: serviceId,
          data: [formatTimeData({
                  metaId: metaId,
                  serviceId: serviceId,
                  isManual: this && this.__auto ? false : true,
                  seq: info.seq,
                  sessionId: info.sessionId,
                  props: serviceId !== repTypes.UBT.subTypes.PAGE_VIEW ? __assign(__assign({}, get(UBT_PAGE_VIEW_CACHE_KEY)), extra) : extra,
              })],
      }, force);
  }

  var force = false;
  /** 点击跳转 */
  function click(metaId, currModule, extra) {
      force = false;
      base(metaId, currModule, extra);
  }
  /** 跳转强制上报 */
  function clickForce(metaId, currModule, extra) {
      force = true;
      base(metaId, currModule, extra);
  }
  function base(metaId, currModule, extra) {
      var data$$1 = {};
      if (typeof currModule === 'string') {
          data$$1.currModule = currModule || undefined;
          data.prevModule = currModule || undefined;
          currModule && notifyNative(data.prevPage || '', currModule);
      }
      else {
          data$$1 = currModule;
          data.prevModule = undefined;
      }
      return event.bind(this)(metaId, repTypes.UBT.subTypes.CLICK, __assign(__assign({}, data$$1), extra), force);
  }

  var force$1 = false;
  /** 点击控件 */
  function clickButton(metaId, currModule, extra) {
      force$1 = false;
      base$1(metaId, currModule, extra);
  }
  function clickButtonForce(metaId, currModule, extra) {
      force$1 = true;
      base$1(metaId, currModule, extra);
  }
  function base$1(metaId, currModule, extra) {
      var data = {};
      if (typeof currModule === 'string') {
          data.currModule = currModule;
          /** clickButton取消同步module */
          // pageData.prevModule = currModule;
          // notifyNative(pageData.prevPage || '', currModule);
      }
      else {
          data = currModule;
      }
      return event.bind(this)(metaId, repTypes.UBT.subTypes.CLICK_BUTTON, __assign(__assign({}, data), extra), force$1);
  }

  var force$2 = false;
  /** 弹框展示 */
  function dialogView(metaId, extra) {
      force$2 = false;
      base$2(metaId, extra);
  }
  function dialogViewForce(metaId, extra) {
      force$2 = true;
      base$2(metaId, extra);
  }
  function base$2(metaId, extra) {
      return event.bind(this)(metaId, repTypes.UBT.subTypes.DIALOG_VIEW, extra, force$2);
  }

  var force$3 = false;
  /** 弹框点击 */
  function dialogClick(metaId, extra) {
      force$3 = false;
      base$3(metaId, extra);
  }
  function dialogClickForce(metaId, extra) {
      force$3 = true;
      base$3(metaId, extra);
  }
  function base$3(metaId, extra) {
      return event.bind(this)(metaId, repTypes.UBT.subTypes.DIALOG_CLICK, __assign({}, extra), force$3);
  }

  /** 页面离开 */
  function pageExit(metaId, extra) {
      var durationTime = Math.ceil((+new Date - data.time) / 1000);
      return event.bind(this)(metaId, repTypes.UBT.subTypes.PAGE_EXIT, __assign({ durationTime: durationTime, currPage: data.prevPage }, extra), true);
  }

  /** 页面曝光 */
  function pageView(metaId, currPage, extra) {
      if (extra === void 0) { extra = {}; }
      var prevPage = data.prevPage, prevModule = data.prevModule;
      data.time = +new Date();
      data.prevPage = currPage;
      data.prevModule = undefined;
      set(UBT_PAGE_VIEW_CACHE_KEY, __assign({ currPage: currPage }, extra));
      notifyNative(currPage);
      return event.bind(this)(metaId, repTypes.UBT.subTypes.PAGE_VIEW, __assign({ prevPage: prevPage,
          currPage: currPage,
          prevModule: prevModule }, (!extra.pageShowNum ? __assign({ pageShowNum: 1 }, extra) : extra)));
  }

  var ubt = {
      event: event,
      click: click,
      clickForce: clickForce,
      clickButton: clickButton,
      clickButtonForce: clickButtonForce,
      dialogView: dialogView,
      dialogViewForce: dialogViewForce,
      dialogClick: dialogClick,
      dialogClickForce: dialogClickForce,
      pageExit: pageExit,
      pageView: pageView,
  };
  var ubtAuto = __assign({}, ubt);
  Object.defineProperty(ubtAuto, "__auto", { value: true });

  /**
   * 分享状态上报
   */
  function state(data) {
      record(data, repTypes.SHARE.subTypes.STATE);
  }
  /**
   * 分享回流上报
   */
  function feedback(data) {
      record(data, repTypes.SHARE.subTypes.FEEDBACK);
  }
  function record(data, subType) {
      report({
          subType: subType,
          type: repTypes.SHARE,
          data: [formatTimeData(data)],
      });
  }
  var share = { state: state, feedback: feedback };

  function enableQuestMobile() {
      // tslint:disable
      if (window.__quemo__) {
          return;
      }
      if ([].slice.call(document.getElementsByTagName('script')).filter(function (item) { return item.src && ~item.src.indexOf('qchannel03.cn/m2.js'); })[0]) {
          return;
      }
      // 目前仅开发移动端
      if (!(uaFunc.isAndroid() || uaFunc.isIOS())) {
          return;
      }
      var title = document.title;
      var platform = uaFunc.isAndroid() ? 'android' : 'ios';
      var from = '';
      window._maq = window._maq || [];
      var _maq = window._maq;
      _maq.push(['account', '9a120171'], ['channel', encodeURIComponent(from)], ['point', encodeURIComponent(title)], ['platform', platform]);
      (function () {
          var ma = document.createElement('script');
          ma.type = 'text/javascript';
          ma.async = true;
          ma.src = ('https:' == document.location.protocol ? 'https' : 'http') + '://www.qchannel03.cn/m2.js?w=' + _maq[0][1];
          var s = document.getElementsByTagName('script')[0];
          s.parentNode.insertBefore(ma, s);
          window.__quemo__ = true;
      })();
  }

  // 微信读取只有test/prod
  var isTest$1 = isDev();
  function check(appKey, thirdpartyId) {
      if (!appKey && !thirdpartyId) {
          return true;
      }
      if (appKey && thirdpartyId) {
          var openId = cookie.get("wxopenid_" + appKey + "_" + (isTest$1 ? 4 : 1));
          if (!openId) {
              wxAuth(thirdpartyId, location.href);
              return false;
          }
          info.deviceId = openId;
          return true;
      }
      if (isTest$1) {
          throw new Error('appKey和thirdpartyId必须都存在');
      }
      return false;
  }
  function wxAuth(thirdpartyId, fromUri) {
      // http://gitlab.ximalaya.com/x-fm/xpassport/wikis/%E7%AC%AC%E4%B8%89%E6%96%B9h5%E7%99%BB%E5%BD%95(302%E5%9B%9E%E8%B0%83)
      location.href = "https://passport" + (isTest$1 ? '.test' : '') + ".ximalaya.com/thirdparty-h5/v1/auth/" + thirdpartyId + "/wx/baseAuthorizeAndRedirect?fromUri=" + encodeURIComponent(fromUri);
  }

  function warn(old, now) {
      if (isDev()) {
          console.warn(old + " is deprecated" + (now ? ", please use " + now + " instead." : ''));
      }
  }

  function collectUtmInfo() {
      var referrer = document.referrer;
      var utmSource = trim(isUrlPar('utm_source'));
      var obj = {
          utm_source: '',
          utm_medium: '',
          utm_campaign: '',
          utm_content: '',
          utm_term: '',
          utm_from: '',
      };
      // 有referrer 且非喜马拉雅
      // var referrer = "http://baidu.com/xmlog/doc/?utm_source=souce&utm_medium=pc&utm_campaign=xx&utm_term=dx&utm_content=121"
      // http://192.168.20.33:8090/xmlog/doc/?utm_source=souce&utm_medium=pc&utm_campaign=xx&utm_term=dx&utm_content=121
      if (referrer) {
          populateFromUrl(obj, referrer);
      }
      // url含有utm_source查询参数
      if (utmSource !== '') {
          populateFromUrl(obj);
      }
      if (obj.utm_source) {
          for (var key in obj) {
              var val = obj[key] || '';
              if (obj.hasOwnProperty(key)) {
                  cookie.set(key, encodeURIComponent(val || ''));
              }
          }
      }
      cookie.set('x_xmly_traffic', encodeURIComponent(getUtmInfo()));
  }
  /** 获取营销数据 */
  function getUtmInfo() {
      var arr = [
          'utm_source',
          'utm_medium',
          'utm_campaign',
          'utm_content',
          'utm_term',
          'utm_from',
      ];
      for (var i = 0; i < arr.length; i++) {
          var item = arr[i];
          var val = decodeURIComponent(cookie.get(item));
          if (i === 0 && val == null) {
              return '';
          }
          arr[i] = item + ":" + (val == null ? '' : val);
      }
      if (arr[0]) {
          return arr.join('&');
      }
      return '';
  }
  /** 默认从当前url去解析 */
  function populateFromUrl(model, url) {
      var searchStr;
      if (url) {
          var a = document.createElement('a');
          a.href = url;
          searchStr = a.search;
      }
      for (var p in model) {
          model[p] = decodeURIComponent(isUrlPar(p, searchStr));
      }
      // from 参数格式特殊
      model['utm_from'] = decodeURIComponent(isUrlPar('from', searchStr));
  }

  function getAttr(element, name) {
      try {
          return element.getAttribute(name);
      }
      catch (e) {
          return '';
      }
  }

  function init$1 (enableXmLog) {
      var onDoc = document.addEventListener || document.attachEvent;
      var onWindow = window.addEventListener || window.attachEvent;
      var hasPageHide = 'onpagehide' in window;
      onWindow(hasPageHide ? 'pageshow' : 'load', function () {
          enableXmLog && instance.init();
      });
      onWindow(hasPageHide ? 'pagehide' : 'unload', function () {
          reportObj.flush();
          if (instance.checkSending() || reportObj.checkSending()) {
              var isSleep = +new Date();
              while ((+new Date() - isSleep) < 300) {
                  // 延时300ms
                  // 解决rollup tree shaking问题
                  console.log();
              }
          }
          if (enableXmLog) {
              if (temData.page && enableXmLog) {
                  ss.set('srcPage', temData.page || '');
                  ss.set('srcPageId', temData.pageId || '');
                  ss.set('srcModule', temData.module || '');
                  ss.set('srcPosition', temData.postion || '');
              }
              instance.flush();
          }
      });
      if (enableXmLog) {
          onDoc('click', function (oev) {
              var ev = oev || window.event;
              var target = (ev.target || ev.srcElement);
              while (target && getAttr(target, 'xmlog-spy') !== 'xm') {
                  target = target.parentNode;
              }
              if (getAttr(target, 'xmlog-spy') === 'xm') {
                  temData.module = getAttr(target, 'xmlog-mod') || '';
                  temData.postion = getAttr(target, 'xmlog-pos') || '';
              }
          }, false);
          // 获取广告相关数据
          collectUtmInfo();
      }
  }

  /** 初始化入口，需指定appName及version */
  function start(_a) {
      var appName = _a.a, customCommon = _a.c, bussinessId = _a.b, version = _a.v, enableXmLog = _a.xl, thirdpartyId = _a.tid, appKey = _a.ak;
      if (info.bId || !isWin)
          return;
      if (bussinessId) {
          info.bId = bussinessId;
      }
      else {
          throw new Error("config option: bussinessId is missing");
      }
      if (customCommon) {
          setCustomCommon(customCommon);
      }
      if (uaFunc.isWeixin() && !check(appKey, thirdpartyId)) {
          return false;
      }
      if (uaFunc.isIting()) {
          initApp();
      }
      if (appName || version) {
          warn("config options: appName and version", "bId(bussinessId)");
      }
      init$1(enableXmLog);
      enableQuestMobile();
      return true;
  }

  exports.info = info;
  exports.getData = get;
  exports.name = sdkName;
  exports.version = sdkVersion;
  exports.apm = apm;
  exports.xmLog = xmLog;
  exports.ubt = ubt;
  exports.ubtAuto = ubtAuto;
  exports.share = share;
  exports.start = start;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
