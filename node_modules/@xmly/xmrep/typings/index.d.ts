// Generated by dts-bundle v0.7.3

declare module '@xmly/xmrep' {
    export { info } from "@xmly/xmrep/share/app";
    export { get as getData } from "@xmly/xmrep/share/cache";
    export { sdkName as name, sdkVersion as version } from "@xmly/xmrep/config";
    export * from "@xmly/xmrep/functions/apm";
    export * from "@xmly/xmrep/functions/log";
    export * from "@xmly/xmrep/functions/ubt";
    export * from "@xmly/xmrep/functions/share";
    export * from "@xmly/xmrep/start";
}

declare module '@xmly/xmrep/share/app' {
    export default function getSSID(): number;
    export const uuid: string;
    /** 应用相关 */
    export const info: {
        appId: string;
        bId: string;
        deviceId: string;
        /** 设备类别 */
        readonly deviceType: "weixin" | "android" | "ios" | "weibo" | "qq" | "browser";
        sessionId: number;
        seq: number;
    };
    export const initApp: () => void;
}

declare module '@xmly/xmrep/share/cache' {
    export const get: (key: string) => any;
    export const set: (key: string, val: any) => void;
}

declare module '@xmly/xmrep/config' {
    export const binaryReportUrl: string;
    export const base64ReportUrl: string;
    export const finalBRUrl: any;
    export const reportErrorUrl = "";
    export const repTypes: {
        APM: {
            name: string;
            priority: number;
            switchKey: string;
            subTypes: {
                /** 页面性能 */
                PAGE: string;
                /** 网络请求时间 */
                NETWORK: string;
                /** 资源加载监控 */
                STATICRESOURCE: string;
            };
        };
        SHARE: {
            /** 分享跟踪 */
            name: string;
            priority: number;
            switchKey: string;
            subTypes: {
                /** 分享状态 */
                STATE: string;
                /** 分享回流 */
                FEEDBACK: string;
            };
        };
        UBT: {
            name: string;
            switchKey: string;
            priority: number;
            subTypes: {
                /** 页面曝光 */
                PAGE_VIEW: string;
                /** 页面离开 */
                PAGE_EXIT: string;
                /** 点击跳转 */
                CLICK: string;
                /** 点击控件 */
                CLICK_BUTTON: string;
                /** 控件滑动曝光*/
                SLIP_PAGE: string;
                /** 弹框展示 */
                DIALOG_VIEW: string;
                /** 弹框点击 */
                DIALOG_CLICK: string;
            };
        };
    };
    export const defaultMonitorWhiteList: (string | RegExp)[];
    export const networkInterval: number;
    export const maxApmValidTime: number;
    export const maxAllowRetryTimes = 3;
    export const maxAllowSendSize = 5;
    export const mergeRequestDuration = 1000;
    export const maxAllowCacheSize = 20;
    export const defaultSampleRate: number;
    export const maxMonitorQueueLength = 5;
    export const reportSwitchKey = "xlog.send";
    export const reportWriteKey = "xlog.write";
    export const nativeInfoCookieKey = "xmly_ubt";
    export const sessionIdKey = "_xmLog";
    export const sdkName = "xmrep";
    export const sdkVersion = "2.2.12";
}

declare module '@xmly/xmrep/functions/apm' {
    import { APMConfig } from "@xmly/xmrep/share/types";
    export const apm: {
        init: ({ name, type, sampleRate, routeMap, requestMonitorWhitelist, maxRequestMonitorQueueLength, resourceMonitorWhitelist, maxResourceMonitorQueueLength, }: APMConfig) => void;
    };
}

declare module '@xmly/xmrep/functions/log' {
    import Tracker from '@xmly/xmrep/functions/log/tracker';
    import { ObjAny } from '@xmly/xmrep/share/types';
    class XmLog {
        /** 默认 */
        static defaultTracker: Tracker;
        static init(commonProps: ObjAny | string, val?: string): void;
        static event(props: ObjAny): void;
        static pageView(props: ObjAny): void;
        static pageview(props: ObjAny): void;
        constructor(commonProps: ObjAny);
        event(props: ObjAny): void;
        pageview(props: ObjAny): void;
        pageView(props: ObjAny): void;
    }
    export const xmLog: typeof XmLog;
    export {};
}

declare module '@xmly/xmrep/functions/ubt' {
    import event from "@xmly/xmrep/functions/ubt/event";
    import { click, clickForce } from "@xmly/xmrep/functions/ubt/click";
    import { clickButton, clickButtonForce } from "@xmly/xmrep/functions/ubt/clickButton";
    import { dialogView, dialogViewForce } from "@xmly/xmrep/functions/ubt/dialogView";
    import { dialogClick, dialogClickForce } from "@xmly/xmrep/functions/ubt/dialogClick";
    import pageExit from "@xmly/xmrep/functions/ubt/pageExit";
    import pageView from "@xmly/xmrep/functions/ubt/pageView";
    const ubt: {
        event: typeof event;
        click: typeof click;
        clickForce: typeof clickForce;
        clickButton: typeof clickButton;
        clickButtonForce: typeof clickButtonForce;
        dialogView: typeof dialogView;
        dialogViewForce: typeof dialogViewForce;
        dialogClick: typeof dialogClick;
        dialogClickForce: typeof dialogClickForce;
        pageExit: typeof pageExit;
        pageView: typeof pageView;
    };
    const ubtAuto: {
        event: typeof event;
        click: typeof click;
        clickForce: typeof clickForce;
        clickButton: typeof clickButton;
        clickButtonForce: typeof clickButtonForce;
        dialogView: typeof dialogView;
        dialogViewForce: typeof dialogViewForce;
        dialogClick: typeof dialogClick;
        dialogClickForce: typeof dialogClickForce;
        pageExit: typeof pageExit;
        pageView: typeof pageView;
    };
    export { ubt, ubtAuto };
}

declare module '@xmly/xmrep/functions/share' {
    /**
        * 分享状态上报
        */
    function state(data: IShare): void;
    /**
        * 分享回流上报
        */
    function feedback(data: IShare): void;
    export const share: {
            state: typeof state;
            feedback: typeof feedback;
    };
    /** 上报数据格式 */
    interface IShare {
            /** 分享id */
            sstid: string;
            /** 分享深度 */
            ssdl: string;
            /** 分享来源设备 app/weixin/browser */
            ssdt?: string;
            /** 分享来源设备id */
            ssdv?: string;
            /** 分享方式 */
            type?: string;
            /** 来源pvid */
            spvid?: string;
            /** 浏览页面pvid */
            pvid: string;
    }
    export {};
}

declare module '@xmly/xmrep/start' {
    import { SdkConfig } from "@xmly/xmrep/share/types";
    /** 初始化入口，需指定appName及version */
    export function start({ a: appName, c: customCommon, b: bussinessId, v: version, xl: enableXmLog, tid: thirdpartyId, ak: appKey, }: SdkConfig): boolean | undefined;
}

declare module '@xmly/xmrep/share/types' {
    export type WhiteList = (string | RegExp)[];
    export type RouteMap = (route: string) => string;
    export interface APMConfig {
        name: string;
        /**
          * type 监控类别：
          *    2.性能监控
          *    3.api错误监控
          *    4.资源timing监控
          *    (15: 1111表示监控所有)
          *    默认关闭所有监控
          */
        type?: number;
        /** 采样率 */
        sampleRate?: number;
        /** 请求监控数据采集队列最大长度*/
        maxRequestMonitorQueueLength?: number;
        /** 资源监控数据采集队列最大长度 */
        maxResourceMonitorQueueLength?: number;
        /** 请求监控白名单 */
        requestMonitorWhitelist?: WhiteList;
        /** 资源监控白名单 */
        resourceMonitorWhitelist?: WhiteList;
        /** 前端路由映射 */
        routeMap?: RouteMap;
    }
    export interface SdkConfig {
        /** bussinessId，接入需申请 */
        b: string;
        /** app标识符 */
        a?: string;
        /** 自定义common字段 */
        c?: ObjNumberOrString;
        /** app版本 */
        v?: string;
        /** 开启xmLog缓存（默认关闭，与xmLog.js有冲突） */
        xl?: boolean;
        /** thirdpartyId */
        tid?: string;
        /** appKey */
        ak?: string;
    }
    export interface ObjAny {
        [props: string]: any;
    }
    export interface ObjNumberOrString {
        [props: string]: string | number;
    }
    /** 待发送数据格式 */
    export type SendItem = {
        data: any[];
        type: {
            name: string;
            priority: number;
            switchKey: string;
        };
        subType: string;
    };
    /** 一条记录格式 */
    export type DataItem = {
        time: number;
        subType: string;
        type: string;
        msg: any[];
    };
    export interface DataEnv {
        dt: string;
        bid: string;
        page_url: string;
        ext: ObjNumberOrString | undefined;
        appId?: string;
        deviceId?: string;
        clientSendTime?: number;
        _ct_?: 'h5';
        userAgent?: string;
        agentName?: string;
        agentVersionMajor?: string;
    }
}

declare module '@xmly/xmrep/functions/log/tracker' {
    import { ObjAny } from '@xmly/xmrep/share/types';
    export const temData: ObjAny;
    export default class Tracker {
        constructor(commonProps: ObjAny | string, val?: string);
        init(commonProps: ObjAny | string, val?: string): void;
        pageView(extraData: ObjAny): void;
        event(extraData: ObjAny): void;
    }
}

declare module '@xmly/xmrep/functions/ubt/event' {
    /** 通用ubt上报 */
    export default function event(this: any, metaId: number, serviceId: string, extra?: {
        [key: string]: any;
    }, force?: boolean): void;
}

declare module '@xmly/xmrep/functions/ubt/click' {
    /** 点击跳转 */
    export function click(this: any, metaId: number, currModule?: string, extra?: {
        [key: string]: any;
    }): void;
    /** 跳转强制上报 */
    export function clickForce(this: any, metaId: number, currModule?: string, extra?: {
        [key: string]: any;
    }): void;
}

declare module '@xmly/xmrep/functions/ubt/clickButton' {
    /** 点击控件 */
    export function clickButton(this: any, metaId: number, currModule?: string, extra?: {
        [key: string]: any;
    }): void;
    export function clickButtonForce(this: any, metaId: number, currModule?: string, extra?: {
        [key: string]: any;
    }): void;
}

declare module '@xmly/xmrep/functions/ubt/dialogView' {
    /** 弹框展示 */
    export function dialogView(this: any, metaId: number, extra?: DialogViewProps): void;
    export function dialogViewForce(this: any, metaId: number, extra?: DialogViewProps): void;
    type DialogViewProps = {
        dialogTitle?: string;
    } & {
        [key: string]: any;
    };
    export {};
}

declare module '@xmly/xmrep/functions/ubt/dialogClick' {
    /** 弹框点击 */
    export function dialogClick(this: any, metaId: number, extra?: DialogClickProps): void;
    export function dialogClickForce(this: any, metaId: number, extra?: DialogClickProps): void;
    type DialogClickProps = {
        dialogTitle?: string;
        item?: string;
    } & {
        [key: string]: any;
    };
    export {};
}

declare module '@xmly/xmrep/functions/ubt/pageExit' {
    /** 页面离开 */
    export default function pageExit(this: any, metaId: number, extra?: {
        [key: string]: any;
    }): any;
}

declare module '@xmly/xmrep/functions/ubt/pageView' {
    /** 页面曝光 */
    export default function pageView(this: any, metaId: number, currPage: string, extra?: {
        [key: string]: any;
    }): any;
}

