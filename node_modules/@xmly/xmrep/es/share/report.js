import { info } from './app';
import { finalBRUrl, mergeRequestDuration, maxAllowRetryTimes, reportWriteKey, reportSwitchKey, maxAllowSendSize, maxAllowCacheSize, base64ReportUrl } from '../config';
import { logTimeLabel, getCustomCommon } from './data';
import { findPrority, needCache } from './apmType';
import { ls } from '../utils/storage';
import { isDev } from '../utils/env';
import { encodeToBinary, encodeBufferToBase64 } from './encoder';
import * as reporter from './reporter';
import { browerInfo, uaFunc } from '../utils/ua';
import { getUrl } from '../utils/url';
import { sendByNative, canSendByNative } from './iting';
var Report = /** @class */ (function () {
    function Report() {
        this.unloaded = false;
        this.sendList = []; // 待发送队列
        this.pendingList = []; // 发送中队列
        this.failedList = []; // 发送失败队列
        this.retryTimes = 0;
        /** 业务数据的写关闭字段 */
        this.stopKeys = '';
        /** 是否可以上报 */
        this.canReport = true;
        this.init();
        this.initLoop();
    }
    /** 恢复缓存数据 */
    Report.prototype.init = function () {
        var data = ls.get(Report.CACHE_KEY);
        if (data && data.length) {
            this.pushSendList(data);
            if (!this.checkSending()) {
                this.sendNext(true);
            }
        }
    };
    // 初始化计时器，用于从时间纬度对上报数据进行合并
    Report.prototype.initLoop = function () {
        var _this = this;
        setInterval(function () {
            if (!_this.checkSending() && _this.sendList.length > 0) {
                _this.sendNext();
            }
        }, mergeRequestDuration);
    };
    Report.prototype.send = function (data, sync) {
        if (this.canReport && (!this.stopKeys || !~this.stopKeys.indexOf(data.type.switchKey))) {
            this.addSend(data, sync);
        }
    };
    Report.prototype.sendByNative = function (data, sync) {
        var da = data.data[0];
        delete da[logTimeLabel];
        var env = this.formatData([], true).env;
        var result = sendByNative(da.sessionId, data.type.name, data.subType, env, da);
        if (result === false) {
            this.send(data, sync);
        }
    };
    Report.prototype.flush = function () {
        this.unloaded = true;
        if (this.canReport && !this.checkSending()) {
            // 结束时没有待发送，直接强制
            this.pushSendList(this.failedList);
            this.failedList.length = 0;
            this.sendNext(true);
        }
    };
    Report.prototype.checkSending = function () {
        return this.pendingList.length !== 0;
    };
    Report.prototype.sendNext = function (force) {
        if (!this.canReport) {
            return;
        }
        var list = this.sendList;
        if (list.length) {
            // 取出待发送队列中的 5 条数据进行合并上传
            var data = this.pendingList = list.splice(list.length - maxAllowSendSize, list.length);
            this.report(this.formatData(data), force);
            this.cacheSendList();
        }
    };
    Report.prototype.addSend = function (data, force) {
        if (this.retryTimes > maxAllowRetryTimes) {
            return;
        }
        this.pushSendList(this.formatDataItem(data));
        if (!this.checkSending()) {
            if (force || this.unloaded) {
                this.sendNext(true);
            }
        }
        else {
            this.cacheSendList();
        }
    };
    Report.prototype.pushSendList = function (list) {
        // 数据倒叙排列，优先发送队尾数据
        this.sendList = this.sendList.concat(list).sort(function (a, b) {
            return findPrority(b.type) - findPrority(a.type) || b.time - a.time;
        });
    };
    Report.prototype.cacheSendList = function () {
        var cacheList = this.failedList.concat(this.sendList).filter(needCache);
        var len = cacheList.length;
        ls.set(Report.CACHE_KEY, len ? cacheList.slice(len - maxAllowCacheSize, len) : null);
    };
    /** 字节序列上传必须固定格式 */
    Report.prototype.report = function (data, force) {
        var _this = this;
        if (isDev()) {
            console.log('[XLOG] sending data:', JSON.parse(JSON.stringify(data)));
        }
        var binary = encodeToBinary(data.env, data.items.slice());
        if (force) {
            // 在 iOS 设备上，页面退出时使用 sendBeacon 发送 buffer 会丢失请求体导致服务端解析失败，发送字符串不会有这个问题
            if (uaFunc.isIOS() || uaFunc.isMac()) {
                var base64 = encodeBufferToBase64(binary);
                reporter.send({
                    url: base64ReportUrl,
                    data: base64,
                    useBeacon: true,
                });
            }
            else {
                reporter.send({
                    url: finalBRUrl,
                    data: binary,
                    isOctetData: true,
                    useBeacon: true,
                });
            }
            // 清空发送中队列
            this.pendingList.length = 0;
            return;
        }
        var dealed = false;
        var xhr = reporter.send({
            url: finalBRUrl,
            data: binary,
            isOctetData: true,
        });
        xhr.onerror = xhr.onreadystatechange = function () {
            if (xhr.readyState !== 4 || dealed || _this.unloaded) {
                return;
            }
            dealed = true;
            if (xhr.status !== 200) {
                _this.retryTimes++;
                _this.failedList = _this.failedList.concat(_this.pendingList);
                // 如果有待发送，在发送后再缓存
                if (!_this.sendList.length) {
                    _this.cacheSendList();
                }
            }
            else {
                try {
                    var stopKeys = xhr.getResponseHeader(reportWriteKey) || '';
                    var switchKey = xhr.getResponseHeader(reportSwitchKey) || '';
                    _this.stopKeys = stopKeys;
                    // false 可以上报
                    _this.canReport = !/true/.test(switchKey);
                }
                catch (e) {
                    _this.retryTimes = maxAllowRetryTimes;
                }
            }
            // 清空发送中队列
            _this.pendingList.length = 0;
        };
    };
    Report.prototype.formatDataItem = function (item) {
        return item.data.map(function (it) {
            var time = it[logTimeLabel];
            delete it[logTimeLabel];
            return {
                time: time,
                subType: item.subType,
                type: item.type.name,
                msg: it,
            };
        });
    };
    Report.prototype.formatData = function (items, nativeChannel) {
        if (nativeChannel === void 0) { nativeChannel = false; }
        var env = {
            dt: info.deviceType,
            bid: info.bId,
            page_url: getUrl(),
            ext: getCustomCommon(),
        };
        if (nativeChannel) {
            env._ct_ = "h5";
            Object.assign(env, browerInfo);
        }
        else {
            env.appId = info.appId;
            env.deviceId = info.deviceId;
            env.clientSendTime = +new Date();
        }
        return { items: items, env: env };
    };
    Report.CACHE_KEY = '_apml';
    return Report;
}());
var ops = new Report();
/**
 * 数据上报
 * @param  data {any} 上报数据
 * @param  force {boolean} 是否强制立即发送
 */
export default function report(data, force) {
    if (canSendByNative()) {
        ops.sendByNative(data, force);
    }
    else {
        ops.send(data, force);
    }
}
export var reportObj = ops;
