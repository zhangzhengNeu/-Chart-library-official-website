import { ls } from '../../utils/storage';
import { url } from './share';
var CACHE_KEY = '_xmlog_cache';
var XMLogReport = /** @class */ (function () {
    function XMLogReport() {
        this.isSending = false;
        this.pendingData = [];
        this.failData = [];
    }
    XMLogReport.prototype.checkSending = function () {
        return this.isSending;
    };
    XMLogReport.prototype.send = function (data) {
        this.addSend(data);
    };
    XMLogReport.prototype.flush = function () {
        if (navigator.sendBeacon) {
            if (this.isSending && this.pendingData.length) {
                navigator.sendBeacon(url, JSON.stringify(this.formatData(this.pendingData)));
                this.pendingData.length = 0;
            }
            if (!this.isSending && this.failData.length) {
                navigator.sendBeacon(url, JSON.stringify(this.formatData(this.failData)));
                this.failData.length = 0;
            }
            this.saveData();
        }
    };
    XMLogReport.prototype.init = function () {
        var _this = this;
        var data = ls.get(CACHE_KEY);
        if (data && data.length) {
            this.addSend(data);
        }
        // 避免重复监听
        this.timer && clearInterval(this.timer);
        this.timer = setInterval(function () {
            if (!_this.isSending && _this.pendingData.length > 0) {
                _this.sendNext();
            }
        }, 1e3);
    };
    XMLogReport.prototype.addSend = function (data) {
        this.pendingData = this.pendingData.concat(data);
        this.saveData();
    };
    XMLogReport.prototype.report = function (data) {
        var _this = this;
        if (window.XMLHttpRequest) {
            var xhr_1 = new XMLHttpRequest();
            this.isSending = true;
            try {
                xhr_1.open('POST', url, true);
                xhr_1.withCredentials = true;
                xhr_1.setRequestHeader('Content-Type', 'application/json');
                xhr_1.onerror = xhr_1.onreadystatechange = function () {
                    if (xhr_1.readyState !== 4) {
                        return;
                    }
                    if (xhr_1.status === 200) {
                        _this.saveData();
                    }
                    else {
                        _this.failData = _this.failData.concat(data);
                    }
                    _this.isSending = false;
                };
                xhr_1.send(JSON.stringify(this.formatData(data)));
            }
            catch (e) {
                this.failData = this.failData.concat(data);
                this.isSending = false;
            }
        }
    };
    XMLogReport.prototype.sendNext = function () {
        if (this.pendingData.length) {
            this.report(this.pendingData.slice());
            this.pendingData.length = 0;
        }
    };
    XMLogReport.prototype.formatData = function (data) {
        return {
            events: data,
        };
    };
    XMLogReport.prototype.saveData = function () {
        var data = this.pendingData.concat(this.failData);
        if (data.length) {
            ls.set(CACHE_KEY, data);
        }
        else {
            ls.set(CACHE_KEY, null);
        }
    };
    return XMLogReport;
}());
var instance = new XMLogReport();
export default instance;
