import report from '../share/report';
import { formatTimeData } from '../share/data';
import { cleanUrl, cleanWhiteList } from '../share/clean';
import { repTypes } from '../config';
/**
 * 监控api， 入侵fetch/XMLHttpRequest
 */
var Fetch = /** @class */ (function () {
    function Fetch(_a) {
        var whiteList = _a.whiteList, maxQueueLength = _a.maxQueueLength;
        this.whiteList = whiteList || [];
        this.dataQueue = [];
        this.MAX_ALLOW_SIZE = maxQueueLength || 1;
    }
    Fetch.prototype.start = function () {
        this.injectXhr();
        this.injectFetch();
    };
    Fetch.prototype.injectFetch = function () {
        var _this = this;
        var old = window.fetch;
        if (!old) {
            return;
        }
        window.fetch = function (url, options) {
            var t = +new Date();
            return old(url, options).then(function (res) {
                _this.report({
                    type: 'fetch',
                    time: (+new Date()) - t,
                    status: res.status,
                    url: cleanUrl(typeof url === 'string' ? url : url.url),
                });
                return Promise.resolve(res);
            }).catch(function (e) {
                _this.report({
                    type: 'fetch',
                    time: (+new Date()) - t,
                    status: 0,
                    url: cleanUrl(typeof url === 'string' ? url : url.url),
                });
                throw e;
            });
        };
        // eslint-disable-next-line
        window.fetch.toString = function () {
            return 'fetch() { [native code] }';
        };
    };
    Fetch.prototype.injectXhr = function () {
        var that = this;
        var oldOpen = XMLHttpRequest.prototype.open;
        XMLHttpRequest.prototype.open = function open(method, url, bool) {
            this.__url = url;
            oldOpen.apply(this, [method, url, bool]);
        };
        var oldSend = XMLHttpRequest.prototype.send;
        XMLHttpRequest.prototype.send = function send(data) {
            var _this = this;
            var t = +new Date();
            var url = cleanUrl(this.__url);
            this.addEventListener('readystatechange', function () {
                if (_this.readyState === 4) {
                    that.report({
                        url: url,
                        type: 'xhr',
                        time: (+new Date()) - t,
                        status: _this.status,
                    });
                }
            }, false);
            var repErr = function () {
                that.report({
                    url: url,
                    type: 'xhr',
                    time: (+new Date()) - t,
                    status: 0,
                });
            };
            this.addEventListener('error', repErr, false);
            this.addEventListener('abort', repErr, false);
            this.addEventListener('timeout', repErr, false);
            try {
                oldSend.apply(this, [data]);
            }
            catch (e) {
                repErr();
                throw e;
            }
        };
    };
    // 数据收集上报
    Fetch.prototype.report = function (data) {
        var url = data.url, type = data.type, status = data.status, duration = data.time;
        if (cleanWhiteList(url, this.whiteList)) {
            return;
        }
        formatTimeData(data);
        // 修改数据格式
        var networkDate = {
            dimensions: { url: url, type: type, status: String(status) },
            params: {},
            metrics: { duration: duration }
        };
        this.dataQueue.push(networkDate);
        if (this.dataQueue.length >= this.MAX_ALLOW_SIZE) {
            report({
                type: repTypes.APM,
                subType: repTypes.APM.subTypes.NETWORK,
                data: this.dataQueue,
            });
            this.dataQueue = [];
        }
    };
    return Fetch;
}());
export default Fetch;
