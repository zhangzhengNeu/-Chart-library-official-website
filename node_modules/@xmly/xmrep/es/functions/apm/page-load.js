import report from '../../share/report';
import { formatTimeData } from '../../share/data';
import { cleanTime } from '../../share/clean';
import { repTypes } from '../../config';
/**
 * 页面加载时间、渲染数据
 */
var PageLoad = /** @class */ (function () {
    function PageLoad(opt) {
        this.performance = window.performance;
        this.fnRouteMap = opt.fnRouteMap;
    }
    PageLoad.prototype.start = function () {
        var _this = this;
        if (this.check()) {
            window.addEventListener('load', function () {
                try {
                    var data = _this.getData();
                    if (data) {
                        report(data);
                    }
                }
                catch (e) {
                    //
                }
            });
        }
    };
    PageLoad.prototype.check = function () {
        return (window.addEventListener
            && this.performance
            && this.performance.timing);
    };
    PageLoad.prototype.getData = function () {
        var performance = this.performance;
        var timing = performance.timing;
        var startTime = timing.navigationStart || timing.fetchStart;
        var metrics = {
            ttfb: timing.responseStart - startTime,
            dns: timing.domainLookupEnd - timing.domainLookupStart,
            tcp: timing.connectEnd - timing.connectStart,
            contentTime: timing.responseEnd - timing.responseStart,
            domComplete: timing.domContentLoadedEventStart - timing.responseEnd,
            dom: timing.domContentLoadedEventStart - startTime,
            load: timing.loadEventStart - startTime,
            resourceLoad: (timing.loadEventStart - startTime) - (timing.domContentLoadedEventStart - startTime) // 资源加载
        };
        if (performance.getEntries) {
            var per = performance.getEntries().filter(function (item) { return item.entryType === 'paint'; })[1];
            per && (metrics.fcp = per.startTime | 0);
        }
        cleanTime(metrics);
        var data = {
            metrics: metrics,
            params: {},
            dimensions: {
                pageName: this.fnRouteMap(location.href),
                protocol: location.protocol.replace(':', ''),
            },
        };
        var sendData = {
            data: [formatTimeData(data)],
            type: repTypes.APM,
            subType: repTypes.APM.subTypes.PAGE,
        };
        return startTime > 0 ? sendData : null;
    };
    return PageLoad;
}());
export { PageLoad };
