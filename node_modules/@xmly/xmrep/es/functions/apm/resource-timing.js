import report from "../../share/report";
import { formatTimeData } from "../../share/data";
import { cleanUrl, cleanWhiteList, cleanTime } from "../../share/clean";
import { repTypes, networkInterval } from "../../config";
import { getSuffix } from "../../utils/url";
var ResourceStatusType;
(function (ResourceStatusType) {
    ResourceStatusType["SUCCESS"] = "0";
    ResourceStatusType["FAIL"] = "1";
})(ResourceStatusType || (ResourceStatusType = {}));
/**
 * 监控页面、资源（静态资源、api接口）网络情况
 */
var ResourceTiming = /** @class */ (function () {
    function ResourceTiming(config) {
        var _this = this;
        this.whiteList = [];
        this.maxQueueLength = 0;
        this.offset = 0;
        this.errorList = [];
        this.timings = [];
        // 处理资源加载错误
        this.handleResourceError = function (e) {
            // 过滤js error
            var target = e.target || e.srcElement;
            var isElementTarget = target instanceof HTMLScriptElement ||
                target instanceof HTMLLinkElement ||
                target instanceof HTMLImageElement ||
                target instanceof HTMLVideoElement ||
                target instanceof HTMLAudioElement;
            if (isElementTarget) {
                var url = cleanUrl(target.src || target.href);
                var type = getSuffix(url);
                // 过滤可能不是资源类型的后缀（比如接口信息）
                if (type.length > 4)
                    return;
                _this.errorList.push(url);
                var apmData = {
                    dimensions: {
                        url: url,
                        type: type,
                        status: ResourceStatusType.FAIL,
                    },
                    metrics: {
                        duration: 0,
                    },
                    params: {},
                };
                _this.report([formatTimeData(apmData)]);
            }
        };
        this.maxQueueLength = config.maxQueueLength;
        this.whiteList = config.whiteList;
        this.errorList = [];
    }
    ResourceTiming.prototype.start = function () {
        if (this.checkAvailable()) {
            // window.addEventListener('load', () => {
            //   setTimeout(() => {
            //     this.collect();
            //   }, networkInterval);
            // })
            window.addEventListener("error", this.handleResourceError, true);
        }
    };
    ResourceTiming.prototype.checkAvailable = function () {
        return !!(window.performance &&
            window.performance.getEntries &&
            window.performance.getEntriesByType &&
            window.addEventListener);
    };
    // 收集数据
    ResourceTiming.prototype.collect = function () {
        var _this = this;
        var times = this.getTimes();
        var nowLength = this.timings.length;
        var newLength = times.length;
        var remain = this.maxQueueLength - nowLength;
        if (newLength < remain) {
            this.timings = this.timings.concat(times);
            this.offset += newLength;
        }
        else {
            var da = this.timings
                .concat(times.slice(0, remain))
                .map(this.formatTiming);
            this.report(da);
            this.timings = [];
            this.offset += remain;
        }
        setTimeout(function () {
            _this.collect();
        }, networkInterval);
    };
    // 上报
    ResourceTiming.prototype.report = function (data) {
        report({
            data: data,
            type: repTypes.APM,
            subType: repTypes.APM.subTypes.STATICRESOURCE,
        });
    };
    // 获取新的resourceTiming
    ResourceTiming.prototype.getTimes = function () {
        var _this = this;
        return performance
            .getEntries()
            .filter(function (item) { return !cleanWhiteList(item.name, _this.whiteList); })
            // paint类型无需网络请求
            .filter(function (item) { return item.entryType !== "paint"; })
            // 过滤出静态资源
            .filter(function (item) { return item.entryType === "resource"; })
            // 过滤fetch请求
            .filter(function (item) { return item.initiatorType !== "fetch"; })
            // 过滤ajax请求
            .filter(function (item) { return item.initiatorType !== "xmlhttprequest"; })
            // 把请求失败的资源过滤
            .filter(function (item) { return _this.errorList.indexOf(item.name) === -1; })
            .slice(this.offset);
    };
    // 整合成功数据
    ResourceTiming.prototype.formatTiming = function (item) {
        var data = {
            dnsTime: item.domainLookupEnd - item.domainLookupStart,
            connectionTime: item.connectEnd - item.connectStart,
            ttfb: item.responseStart - item.requestStart,
            latency: item.responseStart - item.fetchStart,
            contentTime: item.responseEnd - item.responseStart,
            responseHeaderCount: item.transferSize - item.encodedBodySize,
            responseBodyCount: item.encodedBodySize - 0,
        };
        cleanTime(data);
        data.url = cleanUrl(item.name);
        var fileType = getSuffix(data.url);
        var apmData = {
            dimensions: {
                url: data.url,
                type: fileType,
                status: ResourceStatusType.SUCCESS,
                duration: data.contentTime,
            },
            metrics: {},
            params: {},
        };
        return formatTimeData(apmData);
    };
    return ResourceTiming;
}());
export { ResourceTiming };
