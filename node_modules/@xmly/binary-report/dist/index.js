(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.binaryReport = {}));
}(this, function (exports) { 'use strict';

  /** 将字符串格式化为UTF8编码的字节 */
  var getUTF8 = function getUTF8(str, isGetBytes) {
    var back = [];
    var byteSize = 0;

    for (var i = 0; i < str.length; i++) {
      var code = str.charCodeAt(i);

      if (0x00 <= code && code <= 0x7f) {
        byteSize += 1;
        back.push(code);
      } else if (0x80 <= code && code <= 0x7ff) {
        byteSize += 2;
        back.push(192 | 31 & code >> 6);
        back.push(128 | 63 & code);
      } else if (0x800 <= code && code <= 0xd7ff || 0xe000 <= code && code <= 0xffff) {
        byteSize += 3;
        back.push(224 | 15 & code >> 12);
        back.push(128 | 63 & code >> 6);
        back.push(128 | 63 & code);
      }
    }

    for (var _i = 0; _i < back.length; _i++) {
      back[_i] &= 0xff;
    }

    if (isGetBytes) {
      return back;
    }

    if (byteSize <= 0xff) {
      return [0, byteSize].concat(back);
    } else {
      return [byteSize >> 8, byteSize & 0xff].concat(back);
    }
  };

  /** long类型数字串 */
  var getInt64Array = function getInt64Array(number) {
    var ret = [];

    while (number > 0) {
      ret.push(number % 0x100);
      number = parseInt(number / 0x100);
    }

    while (ret.length < 8) {
      ret.push(0);
    }

    return ret;
  };

  var getItem = function getItem(item) {
    var type = item.type,
        subType = item.subType,
        msg = item.msg,
        time = item.time;
    var uType = getUTF8(type, true);
    var uSubType = getUTF8(subType, true);
    var uMsg = getUTF8(JSON.stringify(msg), true);
    var uTime = getInt64Array(time);
    var len = uType.length + 2 + uSubType.length + 2 + uMsg.length + 4 + 8
    /* 时间 */
    ;
    return {
      len: len,
      uType: uType,
      uSubType: uSubType,
      uMsg: uMsg,
      uTime: uTime
    };
  };
  var setItem = function setItem(dv, offset, data) {
    var uType = data.uType,
        uSubType = data.uSubType,
        uMsg = data.uMsg,
        uTime = data.uTime;
    dv.setInt16(offset, uType.length, true);
    offset += 2;

    for (var i = 0; i < uType.length; i++) {
      dv.setUint8(offset++, uType[i]);
    }

    dv.setInt16(offset, uSubType.length, true);
    offset += 2;

    for (var _i = 0; _i < uSubType.length; _i++) {
      dv.setUint8(offset++, uSubType[_i]);
    }

    for (var _i2 = 0; _i2 < uTime.length; _i2++) {
      dv.setInt8(offset++, uTime[_i2]);
    }

    dv.setInt32(offset, uMsg.length, true);
    offset += 4;

    for (var _i3 = 0; _i3 < uMsg.length; _i3++) {
      dv.setUint8(offset++, uMsg[_i3]);
    }
  };
  var getGlobal = function getGlobal(data) {
    var uGg = getUTF8(JSON.stringify(data), true);
    return {
      uGg: uGg,
      len: uGg.length + 4
    };
  };
  var setGlobal = function setGlobal(dv, offset, data) {
    var uGg = data.uGg;

    for (var i = 0; i < uGg.length; i++, offset++) {
      dv.setUint8(offset, uGg[i]);
    }

    dv.setInt32(offset, uGg.length, true);
  };

  var xhr = function xhr(reportUrl, buffer) {
    var xhr = new XMLHttpRequest();
    xhr.open('POST', reportUrl, true);
    xhr.setRequestHeader('content-type', 'application/octet-stream');
    xhr.withCredentials = true;
    xhr.send(buffer);
    return xhr;
  };
  var beacon = function beacon(reportUrl, buffer) {
    navigator.sendBeacon(reportUrl, buffer);
  };

  function getSendData(glob, items) {
    var dataGlobal = getGlobal(glob);
    var dataItems = items.map(getItem);
    var buffer = new ArrayBuffer(dataGlobal.len + dataItems.reduce(function (a, b) {
      return a + b.len;
    }, 0));
    var dv = new DataView(buffer);
    var offset = 0;

    for (var i = 0; i < dataItems.length; i++) {
      setItem(dv, offset, dataItems[i]);
      offset += dataItems[i].len;
    }

    setGlobal(dv, offset, dataGlobal);
    return dv.buffer;
  }
  function binaryReport(url, glob, items, useBeacon) {
    var data = getSendData(glob, items);

    if (useBeacon && navigator.sendBeacon) {
      beacon(url, new Uint8Array(data));
      return;
    }

    return xhr(url, data);
  }

  exports.default = binaryReport;
  exports.getSendData = getSendData;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
